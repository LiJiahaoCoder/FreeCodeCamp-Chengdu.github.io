<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FCC 成都社区</title>
  <icon>https://fcc-cd.dev/images/FCC-CDC-v1-1.png</icon>
  <subtitle>freeCodeCamp 成都社区</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fcc-cd.dev/"/>
  <updated>2020-10-29T16:00:16.149Z</updated>
  <id>https://fcc-cd.dev/</id>
  
  <author>
    <name>freeCodeCamp ChengDu community</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub 在线 IDE 初体验</title>
    <link href="https://fcc-cd.dev/article/engineering/github-ide-first-time/"/>
    <id>https://fcc-cd.dev/article/engineering/github-ide-first-time/</id>
    <published>2020-10-16T09:31:27.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>之前就有听说 GitHub 将推出在线 IDE，一搜索发现很多结果。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201014212657.png"></figure><p>现在 GitHub 的在线 IDE 发布一段时间了，官方命名为：<a href="https://GitHub.com/features/codespaces" target="_blank" rel="noopener">GitHub Codespaces</a>（点击可以申请），今天我们就来体验一下。</p><a id="more"></a><h2 id="基础体验"><a href="#基础体验" class="headerlink" title="基础体验"></a>基础体验</h2><p>在这里，我就拿本人博客的<a href="https://github.com/kitety/blog" target="_blank" rel="noopener">仓库</a>来简单跑一下 GitHub Codespaces。</p><h3 id="创建-IDE"><a href="#创建-IDE" class="headerlink" title="创建 IDE"></a>创建 IDE</h3><p>在 Clone 的按钮选择“Open With Codespaces”</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602682721438-image.png">     <figcaption>创建流程</figcaption></figure><p>进入之后会列出已有的 IDE 列表，没有的话点击下面的新建就是了。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602682784043-image.png">     <figcaption>创建流程</figcaption></figure><h3 id="进入-IDE"><a href="#进入-IDE" class="headerlink" title="进入 IDE"></a>进入 IDE</h3><p>开始进入是在初始化，然后就是同步一些配置。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602682883142-image.png"></figure><p>我们会发现在 VS Code 的配置和插件扩展都会被同步过来（当然，前提是你本地的 VSC 和自己的 GitHub 绑定起来，并且同步配置）。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602683153389-image.png"></figure><p>同时，IDE 可以自动识别 <code>package.json</code> 安装依赖，进来就自动安装好了。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602682955735-image.png"></figure><p>点击查看日志还可以查看初始化的日志。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602683024095-image.png"></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="预装基础环境"><a href="#预装基础环境" class="headerlink" title="预装基础环境"></a>预装基础环境</h4><p>简单的几行代码，我们可以发现 IDE 已经预装了 <code>node</code>、<code>docker</code>、<code>npm</code>、<code>git</code>、<code>python</code> 等等基础开发环境。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602690279501-image.png">     <figcaption>预安装基础环境</figcaption></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>首先全局安装 <code>Hexo</code>，再启动项目 <code>yarn d</code>。</p><pre class=" language-bash"><code class="language-bash">yarn add global hexo</code></pre><p>因为 GitHub 的环境在外面，因此安装速度还是很快的，纵享丝滑。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602690553256-image.png"></figure><h5 id="外部端口的打开"><a href="#外部端口的打开" class="headerlink" title="外部端口的打开"></a>外部端口的打开</h5><p>如果我们的页面需要启动本地端口，IDE 也会提示出来有外部端口。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-14/1602690647172-image.png">     <figcaption>端口打开</figcaption></figure><p>我们也可以在“Remote Explorer”看到全部的端口映射情况</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-15/1602694549227-image.png">    <figcaption>Remote Explorer</figcaption></figure><p>我们点击在浏览器打开，然后就可以看到页面了。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-15/1602694402020-image.png"></figure><p>当我们修改之后，在侧边栏直接提交就是了，简单快捷。也不用任何的设置。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-15/1602694872590-image.png"></figure><h2 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h2><p>我们的项目不仅仅是前端项目，也有可能是后端 Server，这里我就用一个<a href="https://GitHub.com/kitety/likeReddit" target="_blank" rel="noopener">后端 Server</a> 来简单演示一下。</p><h3 id="安装依赖跑起来"><a href="#安装依赖跑起来" class="headerlink" title="安装依赖跑起来"></a>安装依赖跑起来</h3><ul><li>全局安装 <code>nodemon</code></li><li>进入 <code>server</code> 目录安装依赖</li></ul><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015152911.png"></figure><p>很明显这里报错了，原因是我们的 Server 需要连接 PostgreSQL，而我们没有安装。</p><h3 id="不恰当的安装方法"><a href="#不恰当的安装方法" class="headerlink" title="不恰当的安装方法"></a>不恰当的安装方法</h3><p>找到一篇<a href="https://www.runoob.com/postgresql/linux-install-postgresql.html" target="_blank" rel="noopener">教程</a>，照着代码跑起来。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> postgresql postgresql-client<span class="token comment" spellcheck="true"># 创建一个数据库超级用户 postgres</span><span class="token function">sudo</span> -i -u postgres</code></pre><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153252.png"></figure><p>最后，我们会卡在这里，因为我们不知道 Codespace 的密码，因此安装失败。</p><h3 id="Docker-出马"><a href="#Docker-出马" class="headerlink" title="Docker 出马"></a>Docker 出马</h3><p>我们可以观察到 Codespace 已经为我们安装了 Docker，而且在现在相当流行容器化部署，上面的那种安装方式也不够优雅。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153359.png"></figure><p>因此运行命令，安装 PostgreSQL</p><pre class=" language-bash"><code class="language-bash">docker run -p 5432:5432 -v /home/docker/postgresql/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD<span class="token operator">=</span>123456 -e TZ<span class="token operator">=</span>PRC -d --name<span class="token operator">=</span>some-postgres postgres// -p 端口映射// -v 将数据存到宿主服务器// -e POSTGRES_PASSWORD 密码（默认用户名 postgres）// -e TZ<span class="token operator">=</span>PRC 时区：中国// -d 后台运行// --name 容器名称</code></pre><p>运行之后，找不到镜像会自动去拉取镜像</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153646.png"></figure><p>查看下状态</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153710.png"></figure><p>现在重启 server，发现已经可以连接上了。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153818.png"></figure><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>我们可以在“Forwarded Ports”增加端口转发</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015153909.png"></figure><p>简单演示一下 Get 请求，并且是即时的，修改之后可以通过域名来访问。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015154129.png"></figure><p>顺便说一句，如果我们在代码中写好 URL 地址，就可以直接用鼠标在命令行打开对应端口，网址也会被进行替换。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015154329.png"></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>但是也需要注意，如果我们用 Postman 去请求就无法正常请求结果。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015154656.png"></figure><p>如果我们访问 <code>/graphql</code>，请求就会提示“Server cannot be reached”和一些跨域错误。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201015154819.png"></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>俗话说，工欲善其事必先利其器。</p><p>编程更重要的是一种思想，而编码更重要的是去表达思想。</p><p>如果我们将配置环境，机器选择的的步骤省下来，让自己更加专注于思想表达，专注于编码的话，这样会让我们事半功倍。而现在 GitHub IDE 就可以看成 VSC 的网页版。如果你将 VSC 的配置同步到 GitHub 账户的话，你打开在线 IDE 的时候就会直接同步配置，你会很快上手。</p><p>除此之外，GitHub 的里面预装各种环境，让你不再苦恼于环境安装，而且所处的网络环境也很棒，各种库、配置下载起来也是很快，我想这对我们的帮助也是很大的。比如再也不用纠结 <code>node-sass</code> 下载不下等尴尬场景。</p><p><strong>遇到紧急的事情，一个浏览器就可以让你专注开发，这难道不香吗？</strong></p><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>虽然 GitHub 在线 IDE 有很多优点，但是还是有一些不足，肯定不能和 VSC 真机比拟。比如一些接口 <code>/graphql</code>，就没有本地真机开发的那么爽。除此之外，真机的 VSC 就有很多辅助扩展。比如 <code>PicGo</code> 来实现图片上传到 GitHub 做图床，在浏览器 IDE 里面经过测试是跑不通的。</p><p>我测试的时候限制了同时启用两个 IDE，不然会提示你让你处理。</p><figure>    <img src="https://cdn.jsdelivr.net/gh/kitety/blog_img/2020-10-16/1602842378177-image.png"></figure><p>因为每个人所处的网络环境不同，不用高级姿势访问有可能会出现链接断开的情况，这倒是有点硬伤。🤣</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>之前听过“阿里 云电脑”，加上现在 5G 的逐渐普及，说不定未来大家需要的只是一个显示器，可以完成学习、工作和娱乐，配置全部都在远端。听起来天方夜谭，说不定在未来就会实现。</p><p>一个新兴事物的出来，肯定引起人们的好奇和质疑。仔细想想 GitHub 被微软收购之后，先后推出了个人无限私有仓库，免费使用 GitHub Actions，再有 GitHub Codespaces。而微软也先后推出 TS、VSC 等市场举足轻重的开源项目。我所看到是开源界的发展和繁荣，也希望未来越来越好。</p><p>撒花！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;之前就有听说 GitHub 将推出在线 IDE，一搜索发现很多结果。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/kitety/blog_img/img/20201014212657.png&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;现在 GitHub 的在线 IDE 发布一段时间了，官方命名为：&lt;a href=&quot;https://GitHub.com/features/codespaces&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Codespaces&lt;/a&gt;（点击可以申请），今天我们就来体验一下。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="GitHub" scheme="https://fcc-cd.dev/tags/GitHub/"/>
    
      <category term="Codespaces" scheme="https://fcc-cd.dev/tags/Codespaces/"/>
    
  </entry>
  
  <entry>
    <title>SKFI 中韩未来革新孵化器</title>
    <link href="https://fcc-cd.dev/partner/skfi/"/>
    <id>https://fcc-cd.dev/partner/skfi/</id>
    <published>2020-10-15T12:19:00.000Z</published>
    <updated>2020-10-29T16:00:16.341Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;
      
    
    </summary>
    
    
      <category term="Partner" scheme="https://fcc-cd.dev/categories/Partner/"/>
    
    
  </entry>
  
  <entry>
    <title>开源年会成都场丨码农在 1024 技术趴上可以做什么？</title>
    <link href="https://fcc-cd.dev/activity/conference/coscon-2020-chengdu/"/>
    <id>https://fcc-cd.dev/activity/conference/coscon-2020-chengdu/</id>
    <published>2020-10-15T12:19:00.000Z</published>
    <updated>2020-10-29T16:00:15.669Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>可爱的<strong>程序猿/媛</strong>们：</p><p>你好！COVID-19 肆虐后，居家办公后的你感觉如何呢？<strong>1024 程序员节</strong>即将到来，在这专属于程序猿/媛的节日，有没有想出来和大家见见面，到现场和小伙伴们面对面畅聊开源、编程话题呢？</p><p>在此，非常诚挚地邀请你参与成都线下的 <strong>1024 技术 Party</strong>，用你的开源项目及热情来和大家一起愉快地玩耍吧！</p><p>我们的活动有哪些玩法呢？且看我“报菜名”~👇</p><h2 id="听演讲-——-今年-2-天-5-城联动，大咖云集"><a href="#听演讲-——-今年-2-天-5-城联动，大咖云集" class="headerlink" title="听演讲 —— 今年 2 天 5 城联动，大咖云集~"></a>听演讲 —— 今年 2 天 5 城联动，大咖云集~</h2><figure><img src="/activity/conference/coscon-2020-chengdu/2elhomd3jyh.png" class>    <figcaption><strong>中国大陆最具影响力的开源年度盛会</strong></figcaption>    <figcaption><strong>2020 年 10 月 24 ~ 25 日 程序员节 实时直播</strong></figcaption>    <figcaption>北京、上海、深圳、<strong>成都</strong>、长沙 5 城分会场邀你一起嗨！~</figcaption></figure><a id="more"></a><h2 id="摆摊摊-——-开源项目、开源社区、开放社群，尽情展示"><a href="#摆摊摊-——-开源项目、开源社区、开放社群，尽情展示" class="headerlink" title="摆摊摊 —— 开源项目、开源社区、开放社群，尽情展示~"></a>摆摊摊 —— 开源项目、开源社区、开放社群，尽情展示~</h2><figure><img src="/activity/conference/coscon-2020-chengdu/2ednwqsmaqn.png" class><img src="/activity/conference/coscon-2020-chengdu/21vja2e6fg9.png" class>    <figcaption>2018 成都 Web 前端大会 <strong>WebCell</strong> 展位</figcaption></figure><figure><img src="/activity/conference/coscon-2020-chengdu/1elnh6x7tvx.png" class>    <figcaption>2018 成都 Web 前端大会 <strong>Deepin</strong> 展位</figcaption></figure><figure><img src="/activity/conference/coscon-2020-chengdu/xpvkca2y9z.png" class>    <figcaption>2019 成都 Web 全栈大会 <strong>CovScript</strong> 展位</figcaption></figure><h2 id="吹牛皮-——-5-分钟即兴闪电演讲，够胆就来"><a href="#吹牛皮-——-5-分钟即兴闪电演讲，够胆就来" class="headerlink" title="吹牛皮 —— 5 分钟即兴闪电演讲，够胆就来~"></a>吹牛皮 —— 5 分钟即兴闪电演讲，够胆就来~</h2><figure><img src="/activity/conference/coscon-2020-chengdu/1snxqjcdut7.png" class>    <figcaption>2019 成都 Web 全栈大会 <strong>CovScript</strong> 作者闪电演讲</figcaption></figure><h2 id="吃颜饭-——-汉服、JK、Lolita，女装也可！"><a href="#吃颜饭-——-汉服、JK、Lolita，女装也可！" class="headerlink" title="吃颜饭 —— 汉服、JK、Lolita，女装也可！"></a>吃颜饭 —— 汉服、JK、Lolita，女装也可！</h2><figure><img src="/activity/conference/coscon-2020-chengdu/1q7zg59ljvh.png" class>    <figcaption>TEDxChengdu Live 2020 <strong>水歌</strong>着<strong>汉服</strong>闪电演讲</figcaption></figure><h2 id="争奖品-——-直播提问、市集展位、闪电演讲，先到先得"><a href="#争奖品-——-直播提问、市集展位、闪电演讲，先到先得" class="headerlink" title="争奖品 —— 直播提问、市集展位、闪电演讲，先到先得~"></a>争奖品 —— 直播提问、市集展位、闪电演讲，先到先得~</h2><figure><img src="/activity/conference/coscon-2020-chengdu/2dfqvoljbu1.jpg" class>    <figcaption>水歌“钦定”的 <strong>COSCon 抱枕</strong></figcaption></figure><figure><img src="/activity/conference/coscon-2020-chengdu/2qb85xc2ku4.png" class>    <figcaption>超精美的 <strong>freeCodeCamp 限量款双肩包</strong></figcaption></figure><figure><img src="/activity/conference/coscon-2020-chengdu/y1zf5y4gaa.png" class>    <figcaption>FCC 成都社区 <strong>Panky 公仔</strong></figcaption></figure><p>今年 FCC 成都办<em>三无大会</em> —— 无收费、无广告、无主咖……</p><p>因为在<strong>技术趴体</strong>上 —— <strong>人人都是小咖</strong>！</p><p>你来就有展位！</p><p>上就有讲台！</p><figure><img src="/activity/conference/coscon-2020-chengdu/1yxtfqq8aef.png" class>    <figcaption>        立刻进入官网<a target="_blank" href="http://coscon.kaiyuanshe.cn/">注册展位</a>吧！    </figcaption></figure><hr><h2 id="Web-全栈应用分论坛"><a href="#Web-全栈应用分论坛" class="headerlink" title="Web 全栈应用分论坛"></a>Web 全栈应用分论坛</h2><figure><img src="/activity/conference/coscon-2020-chengdu/41jg3kq1wqe.png" class>    <figcaption>        <strong>ECharts</strong>、<strong>Midway</strong>、<strong>DevUI</strong> 等明星项目        —— <strong>核心成员，在线教学</strong>~    </figcaption></figure><figure><img src="/activity/conference/coscon-2020-chengdu/5ony2un1rh.png" class>    <figcaption>第二天也有 <strong>JavaScript 标准委员会中国代表</strong></figcaption>    <figcaption>—— 带你折腾 <strong>TypeScript 编译器</strong></figcaption></figure><h2 id="freeCodeCamp-org-创始人-Quincy-Larson-主题演讲"><a href="#freeCodeCamp-org-创始人-Quincy-Larson-主题演讲" class="headerlink" title="freeCodeCamp.org 创始人 Quincy Larson 主题演讲"></a>freeCodeCamp.org 创始人 Quincy Larson 主题演讲</h2><p>Quincy Larson 于 2014 年创立 freeCodeCamp.org。目前，该开源项目的规模已发展到每月有超过 600 万用户访问，成千上万名志愿者参与贡献。</p><p>在本次演讲中，Quincy 将分享如何将一个开源项目从创始人独立运营发展成大型志愿者团队共同贡献。</p><p>Quincy 将分享如何确定项目愿景，如何规划路线图，如何构建项目的第一个版本，以及在发布第一个版本之后，如何吸引一些用户参与进来，成为项目的贡献者。</p><p>Quincy 将讨论以下方面的策略：</p><ul><li>保证项目财务可持续</li><li>赋能贡献最多的贡献者</li><li>从社区获得反馈，并划分优先级</li><li>选择战略合作伙伴</li></ul><p>Quincy 还将分享更多他从构建 freeCodeCamp.org 中学到的经验教训。</p><h2 id="感受往届氛围"><a href="#感受往届氛围" class="headerlink" title="感受往届氛围"></a>感受往届氛围</h2><ul><li><a href="https://web-conf.dev/" target="_blank" rel="noopener">成都 Web 开发者大会 - 品牌官网</a></li><li><a href="https://mp.weixin.qq.com/s/iQxdcRHG_9vXXE0OeMJE5g" target="_blank" rel="noopener">2018 成都 Web 前端大会 - 总结</a></li><li><a href="https://as.alltuu.com/album/1012564673/" target="_blank" rel="noopener">2019 成都 Web 全栈大会 - 图集</a></li><li><a href="https://covariant.cn/2019/11/19/covscript3-3-release/" target="_blank" rel="noopener">2019 成都 Web 全栈大会 - CovScript 参展方</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;可爱的&lt;strong&gt;程序猿/媛&lt;/strong&gt;们：&lt;/p&gt;
&lt;p&gt;你好！COVID-19 肆虐后，居家办公后的你感觉如何呢？&lt;strong&gt;1024 程序员节&lt;/strong&gt;即将到来，在这专属于程序猿/媛的节日，有没有想出来和大家见见面，到现场和小伙伴们面对面畅聊开源、编程话题呢？&lt;/p&gt;
&lt;p&gt;在此，非常诚挚地邀请你参与成都线下的 &lt;strong&gt;1024 技术 Party&lt;/strong&gt;，用你的开源项目及热情来和大家一起愉快地玩耍吧！&lt;/p&gt;
&lt;p&gt;我们的活动有哪些玩法呢？且看我“报菜名”~👇&lt;/p&gt;
&lt;h2 id=&quot;听演讲-——-今年-2-天-5-城联动，大咖云集&quot;&gt;&lt;a href=&quot;#听演讲-——-今年-2-天-5-城联动，大咖云集&quot; class=&quot;headerlink&quot; title=&quot;听演讲 —— 今年 2 天 5 城联动，大咖云集~&quot;&gt;&lt;/a&gt;听演讲 —— 今年 2 天 5 城联动，大咖云集~&lt;/h2&gt;&lt;figure&gt;
&lt;img src=&quot;/activity/conference/coscon-2020-chengdu/2elhomd3jyh.png&quot; class&gt;
    &lt;figcaption&gt;&lt;strong&gt;中国大陆最具影响力的开源年度盛会&lt;/strong&gt;&lt;/figcaption&gt;
    &lt;figcaption&gt;&lt;strong&gt;2020 年 10 月 24 ~ 25 日 程序员节 实时直播&lt;/strong&gt;&lt;/figcaption&gt;
    &lt;figcaption&gt;北京、上海、深圳、&lt;strong&gt;成都&lt;/strong&gt;、长沙 5 城分会场邀你一起嗨！~&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Conference" scheme="https://fcc-cd.dev/categories/Activity/Conference/"/>
    
    
      <category term="Web" scheme="https://fcc-cd.dev/tags/Web/"/>
    
      <category term="开源" scheme="https://fcc-cd.dev/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="展览" scheme="https://fcc-cd.dev/tags/%E5%B1%95%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>【直播】志愿者贡献平台 PWA 开发实战</title>
    <link href="https://fcc-cd.dev/activity/salon/webcell-strapi-quick-start/"/>
    <id>https://fcc-cd.dev/activity/salon/webcell-strapi-quick-start/</id>
    <published>2020-09-21T09:48:00.000Z</published>
    <updated>2020-10-29T16:00:15.869Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><blockquote><p>【时间】2020 年 9 月 27 日（周日）19:00 ~ 21:00</p></blockquote><p>本次沙龙将为大家直播基于 <a href="https://github.com/search?q=Headless+CMS&ref=opensearch" target="_blank" rel="noopener">Headless CMS</a>、<a href="https://www.webcomponents.org/" target="_blank" rel="noopener">Web 标准组件</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps" target="_blank" rel="noopener">PWA</a> 和 <a href="https://www.typescriptlang.org/zh/" target="_blank" rel="noopener">TypeScript</a> 开发<strong>志愿者贡献平台</strong>。</p><hr><p><img style="width: 100%; max-height: none" src="https://developer-res-cbc-cn.obs.myhwclouds.com/devcenter/activitysign/img/20200916/1600242478177823.jpg"></p><a id="more"></a><hr><h2 id="入门概念"><a href="#入门概念" class="headerlink" title="入门概念"></a>入门概念</h2><hr><h3 id="Headless-CMS"><a href="#Headless-CMS" class="headerlink" title="Headless CMS"></a>Headless CMS</h3><p><a href="https://strapi.io/" target="_blank" rel="noopener"><img src="https://strapi.io/assets/strapi-logo-light.svg" alt></a></p><hr><h3 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h3><p><a href="https://web-cell.dev/" target="_blank" rel="noopener"><img src="https://web-cell.dev/WebCell-0.f1ffd28b.png" alt></a></p><hr><h2 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h2><hr><h3 id="Strapi"><a href="#Strapi" class="headerlink" title="Strapi"></a>Strapi</h3><pre class=" language-shell"><code class="language-shell">yarn create strapi-app my-project --quickstart</code></pre><hr><h3 id="WebCell"><a href="#WebCell" class="headerlink" title="WebCell"></a>WebCell</h3><iframe style="width: 100%; max-width: 100%; height: 100vh" src="https://web-cell.dev/"></iframe><hr><h2 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h2><hr><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>任务 Task</li><li>贡献 Contribution</li><li>评价 Evaluation</li></ul><hr><h3 id="后端难点"><a href="#后端难点" class="headerlink" title="后端难点"></a>后端难点</h3><ul><li><a href="https://strapi.io/documentation/v3.x/plugins/users-permissions.html#providers" target="_blank" rel="noopener">OAuth 登录</a></li><li><a href="https://github.com/hezzze/strapi-provider-upload-oss" target="_blank" rel="noopener">OSS 文件上传</a></li><li><a href="https://strapi.io/blog/how-to-change-the-wysiwyg-in-strapi" target="_blank" rel="noopener">富文本编辑器</a></li><li><a href="https://www.npmjs.com/package/strapi-plugin-documentation" target="_blank" rel="noopener">API 文档生成</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;【时间】2020 年 9 月 27 日（周日）19:00 ~ 21:00&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本次沙龙将为大家直播基于 &lt;a href=&quot;https://github.com/search?q=Headless+CMS&amp;ref=opensearch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Headless CMS&lt;/a&gt;、&lt;a href=&quot;https://www.webcomponents.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web 标准组件&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PWA&lt;/a&gt; 和 &lt;a href=&quot;https://www.typescriptlang.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript&lt;/a&gt; 开发&lt;strong&gt;志愿者贡献平台&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img style=&quot;width: 100%; max-height: none&quot; src=&quot;https://developer-res-cbc-cn.obs.myhwclouds.com/devcenter/activitysign/img/20200916/1600242478177823.jpg&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Salon" scheme="https://fcc-cd.dev/categories/Activity/Salon/"/>
    
    
      <category term="Web" scheme="https://fcc-cd.dev/tags/Web/"/>
    
      <category term="online" scheme="https://fcc-cd.dev/tags/online/"/>
    
      <category term="RESTful" scheme="https://fcc-cd.dev/tags/RESTful/"/>
    
      <category term="WebCell" scheme="https://fcc-cd.dev/tags/WebCell/"/>
    
      <category term="Strapi" scheme="https://fcc-cd.dev/tags/Strapi/"/>
    
  </entry>
  
  <entry>
    <title>华为云 HDZ</title>
    <link href="https://fcc-cd.dev/partner/hdz/"/>
    <id>https://fcc-cd.dev/partner/hdz/</id>
    <published>2020-08-24T09:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.341Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>HDZ 是 <a href="https://developer.huaweicloud.com/hdz.html" target="_blank" rel="noopener">Huawei Developer Zone</a> 的英文缩写，是华为开发者生态面向全球开发者建立开放、创新、多元的开发者社区组织。致力于帮助开发者学习提升、互动交流、挖掘机会，推动 ICT、互联网等产业生态的建立和发展。对云计算、IoT、人工智能、5G、区块链、鲲鹏、昇腾、软件开发与运维、开源等各技术领域感兴趣的开发者、软件工程师、创业者、运营人、产品人、大学生、老师等都可以参与到 HDZ。HDZ 完全由各地 HDZ 组织者、志愿者自发组建和领导，华为公司只按需对 HDZ 社区活动提供必要的方向指导、资源支持、活动支撑等，并为各地 HDZ 组织者提供与全国组织者互动交流的机会。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;HDZ 是 &lt;a href
      
    
    </summary>
    
    
      <category term="Partner" scheme="https://fcc-cd.dev/categories/Partner/"/>
    
    
  </entry>
  
  <entry>
    <title>FCC 小姐姐直播教你 Vue 3.0！</title>
    <link href="https://fcc-cd.dev/activity/salon/vue-3-quick-start/"/>
    <id>https://fcc-cd.dev/activity/salon/vue-3-quick-start/</id>
    <published>2020-08-19T02:11:00.000Z</published>
    <updated>2020-10-29T16:00:15.869Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><blockquote><p>【时间】2020 年 8 月 27 日（周四）19:00 ~ 20:00</p></blockquote><p>自 Vue 3.0 开放了源码，开发者最关心的是框架的更新能为带来什么编码优质体验。本次分享将介绍 Vue 3.0 的新特性以及和 2.0 的区别，也会分享做组件库时踩到的坑，让大家可以避免踩雷。</p><a id="more"></a><p><img style="width: 100%; max-height: none" src="https://developer-res-cbc-cn.obs.myhwclouds.com/devcenter/activitysign/img/20200813/1597306543218005.jpg"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;blockquote&gt;
&lt;p&gt;【时间】2020 年 8 月 27 日（周四）19:00 ~ 20:00&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自 Vue 3.0 开放了源码，开发者最关心的是框架的更新能为带来什么编码优质体验。本次分享将介绍 Vue 3.0 的新特性以及和 2.0 的区别，也会分享做组件库时踩到的坑，让大家可以避免踩雷。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Salon" scheme="https://fcc-cd.dev/categories/Activity/Salon/"/>
    
    
      <category term="Vue" scheme="https://fcc-cd.dev/tags/Vue/"/>
    
      <category term="online" scheme="https://fcc-cd.dev/tags/online/"/>
    
  </entry>
  
  <entry>
    <title>阿里云 ACE 成都同城会</title>
    <link href="https://fcc-cd.dev/partner/ace-cd/"/>
    <id>https://fcc-cd.dev/partner/ace-cd/</id>
    <published>2020-08-11T04:21:28.000Z</published>
    <updated>2020-10-29T16:00:16.337Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>我在青城山巅、峨眉云端，还有那四姑娘山间，期待所有成都技术爱好者的到来！ACE 成都同城会带你畅游美景，尝遍美食，享尽云计算的魅力，让我们一起云海弄潮！</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;我在青城山巅、峨眉云端，还
      
    
    </summary>
    
    
      <category term="Partner" scheme="https://fcc-cd.dev/categories/Partner/"/>
    
    
  </entry>
  
  <entry>
    <title>【阿里云】Web 前端工作坊</title>
    <link href="https://fcc-cd.dev/activity/workshop/aliyun-web-front-end/"/>
    <id>https://fcc-cd.dev/activity/workshop/aliyun-web-front-end/</id>
    <published>2020-08-11T04:01:36.000Z</published>
    <updated>2020-10-29T16:00:15.969Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><blockquote><p>【时间】2020 年 8 月 15 日（周六）13:30 ~ 17:10<br>【地点】成都天府五街 菁蓉国际广场 2 栋 5 楼少颢厅<br>【设备】<strong>自带电脑！自带电脑！自带电脑！</strong></p></blockquote><a id="more"></a><p><img style="width: 100%; max-height: none" src="https://ucc.alicdn.com/pic/developer-ecology/e603465250054b07a8a2ee28e1e660d9.png"></p><h2 id="互动奖品"><a href="#互动奖品" class="headerlink" title="互动奖品"></a>互动奖品</h2><figure><img src="/activity/workshop/aliyun-web-front-end/WebCell-cap.jpg" class>    <figcaption>WebCell 棒球帽</figcaption></figure><p>WebCell 主题提问者可获赠一顶 <strong>WebCell 棒球帽</strong>~</p></body></html>]]></content>
    
    <summary type="html">
    
      阿里云开发者成都 ACE 同城会携手淘系、阿里云云开发平台的专家和 WebCell 前端开源框架作者，为大家分享前端的前沿技术与应用。
    
    </summary>
    
    
      <category term="Activity" scheme="https://fcc-cd.dev/categories/Activity/"/>
    
      <category term="Workshop" scheme="https://fcc-cd.dev/categories/Activity/Workshop/"/>
    
    
      <category term="Web" scheme="https://fcc-cd.dev/tags/Web/"/>
    
      <category term="front-end" scheme="https://fcc-cd.dev/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>【公益】高考志愿填报助手</title>
    <link href="https://fcc-cd.dev/article/propaganda/college-applier/"/>
    <id>https://fcc-cd.dev/article/propaganda/college-applier/</id>
    <published>2020-07-27T06:31:38.000Z</published>
    <updated>2020-10-29T16:00:16.193Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>2020 年高考是一场非常不容易的高考，毕业生和社会各界都历经艰辛，希望我们的拼搏都能有更加美好的明天。</p><p>说起<strong>填志愿</strong>，回想起我高考时正值汶川大地震。那时我们获取<strong>可靠、有效、全面的志愿参考信息</strong>，基本只能通过学校发的一本大部头参考书，里面汇集了<strong>全国招生的院校、专业和往年录取数据</strong>。但这样一本像过去每个城市的电话黄页一样的书，<strong>反复查阅它的“低效”痛苦</strong>就不用多说了。</p><figure>    <img src="https://img14.360buyimg.com/n1/jfs/t1/119147/20/5048/404108/5eb260c6E8e88fd49/94ddfbc9426f974e.jpg"></figure><p>进入<a href="https://www.fyscu.com/" target="_blank" rel="noopener">大学 IT 技术社团</a>之后，就一直想用自己学到的编程技术，来为学弟学妹解决我当年那般的痛苦。但彼时，我国<strong>政府部门信息公开</strong>政策的保守和技术的落后，让我们很难获得好用的数据，商业平台又有巨大的封闭壁垒，遂作罢……</p><p>直到前一阵子，FCC 一位城市社区组织者在群里分享了<a href="https://cloud.tencent.com/tvp/member/157" target="_blank" rel="noopener">黄希彤</a>老师的<a href="https://professortian.net/" target="_blank" rel="noopener">填教授</a>公益项目，看到他<strong>把多年收集的公开数据用统计学方法进一步处理</strong>，免费为广大考生做参考，内心十分激动！于是想尽自己现在的专长所能，帮黄老师优化一下前端界面，让广大的考生和家长用起来更方便。</p><a id="more"></a><p>同时黄老师也欣然接受了我一直以来的<strong>开源直播</strong>方式，于是便有了 <a href="https://live.bilibili.com/22218677" target="_blank" rel="noopener">FCC 中文社区 B 站直播间</a>长期栏目<a href="https://github.com/freeCodeCamp-China/activity/issues/5" target="_blank" rel="noopener">《水歌酱的开源日常》</a>的首期特别节目<a href="https://mp.weixin.qq.com/s/JX3aHGXIWCTrZho-O2XSaA" target="_blank" rel="noopener">《编程帮我填志愿》</a>，也欢迎大家关注 <a href="https://space.bilibili.com/335505768/" target="_blank" rel="noopener">FCC B 站账号</a>以接收日常节目的开播提醒~</p><h2 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure><img src="/article/propaganda/college-applier/PWA-3.jpg" class></figure><ol><li>选择考生所在<strong>省份</strong>、<strong>分科</strong>后，再填入<strong>高考成绩</strong>，点击查询按钮即可查询到<strong>根据往年录取情况有可能考上的学校和专业</strong></li><li>可以下拉选择不同的<strong>上线概率</strong>后重新查询，来筛选相对保险（高概率、保底）的专业和相对有挑战（低概率）的专业</li><li>对于公布<strong>位次</strong>的省份，可以选择按照位次来查询筛选专业</li><li>筛选后页面出现过滤按钮，可以输入感兴趣的学校和专业<strong>关键字</strong>在结果中进行进一步的筛选</li><li>每年招生情况都会发生变化，因此考生在查询后可点击<strong>学校、专业名称的链接</strong>，进一步了解相关专业当年的招生信息</li></ol><h3 id="安装为-App"><a href="#安装为-App" class="headerlink" title="安装为 App"></a>安装为 App</h3><figure><img src="/article/propaganda/college-applier/PWA-0.jpg" class><figcaption>现代浏览器首次访问自动提示安装</figcaption></figure><figure><img src="/article/propaganda/college-applier/PWA-1.jpg" class><figcaption>确认安装到桌面</figcaption></figure><figure><img src="/article/propaganda/college-applier/PWA-2.jpg" class><figcaption>已安装到桌面</figcaption></figure><figure><img src="/article/propaganda/college-applier/PWA-4.jpg" class><figcaption>App 在系统中独立运行</figcaption></figure><h2 id="技术知识"><a href="#技术知识" class="headerlink" title="技术知识"></a>技术知识</h2><p>为了满足黄老师提出的“除 CSS 样式外，简单业务不依赖任何库”要求，<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>本次对<a href="https://github.com/stonelf/China-college-application" target="_blank" rel="noopener">填教授 Web 前端代码</a>的重构采用了最新版 <strong>BootStrap</strong>、<strong>DOM API</strong>、<strong>JavaScript 标准</strong>，刚学完 <strong>freeCodeCamp HTML、CSS、JS 基础课程</strong>的菜鸟也能快速上手~</p><p>以下是这些<strong>易学、易用的标准、通用技术</strong>的入门文档：</p><h3 id="HTML-标签、属性"><a href="#HTML-标签、属性" class="headerlink" title="HTML 标签、属性"></a>HTML 标签、属性</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex" target="_blank" rel="noopener"><code>tabindex</code> 全局属性</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/hidden" target="_blank" rel="noopener"><code>hidden</code> 全局属性</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener"><code>iframe</code> 标签的 <code>name</code> 属性</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template" target="_blank" rel="noopener"><code>template</code> 标签</a></li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty" target="_blank" rel="noopener"><code>:empty</code> 伪类选择符</a></li></ol><h3 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors" target="_blank" rel="noopener">CSS 选择器 API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/forms" target="_blank" rel="noopener"><code>document.forms</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode" target="_blank" rel="noopener"><code>ParentNode</code> 接口</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ChildNode" target="_blank" rel="noopener"><code>ChildNode</code> 接口</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="noopener"><code>Element.prototype.classList</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLFormElement/elements" target="_blank" rel="noopener"><code>HTMLFormElement.prototype.elements</code></a></li></ol><h3 id="BOM-API"><a href="#BOM-API" class="headerlink" title="BOM API"></a>BOM API</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener"><code>fetch()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL" target="_blank" rel="noopener"><code>URL()</code></a></li></ol><h3 id="ECMAScript-API、语法"><a href="#ECMAScript-API、语法" class="headerlink" title="ECMAScript API、语法"></a>ECMAScript API、语法</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener"><code>Array.prototype.map()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">ECMAScript 6 模板字符串</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noopener"><code>with</code> 语句的利弊</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async</code> 函数</a></li></ol><h3 id="第三方开源库、云服务"><a href="#第三方开源库、云服务" class="headerlink" title="第三方开源库、云服务"></a>第三方开源库、云服务</h3><ol><li><a href="https://getbootstrap.com/" target="_blank" rel="noopener">BootStrap 4.5</a></li><li><a href="https://polyfill.io/" target="_blank" rel="noopener">API Polyfill 自动补丁服务</a></li><li><a href="https://codesandbox.io/" target="_blank" rel="noopener">CodeSandbox 在线 Web 前端项目沙盒</a></li><li><a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel 零配置打包器</a></li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>以上知识点在 <a href="https://fcc-cd.dev/">FCC 成都社区</a>之前的技术博文有介绍：</p><ol><li><a href="https://mp.weixin.qq.com/s/Yyl27IShg6jhiuW3yvjycg" target="_blank" rel="noopener">《ECMAScript + DOM 骚操作》</a></li><li><a href="https://mp.weixin.qq.com/s/i7JJtDg6zUvwoGi05FrEGw" target="_blank" rel="noopener">《JavaScript 效率工具》</a></li><li><a href="https://mp.weixin.qq.com/s/hxCwiokl4uPXJscTQi42-A" target="_blank" rel="noopener">《如何用开源软件办一场技术大会？》</a></li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;2020 年高考是一场非常不容易的高考，毕业生和社会各界都历经艰辛，希望我们的拼搏都能有更加美好的明天。&lt;/p&gt;
&lt;p&gt;说起&lt;strong&gt;填志愿&lt;/strong&gt;，回想起我高考时正值汶川大地震。那时我们获取&lt;strong&gt;可靠、有效、全面的志愿参考信息&lt;/strong&gt;，基本只能通过学校发的一本大部头参考书，里面汇集了&lt;strong&gt;全国招生的院校、专业和往年录取数据&lt;/strong&gt;。但这样一本像过去每个城市的电话黄页一样的书，&lt;strong&gt;反复查阅它的“低效”痛苦&lt;/strong&gt;就不用多说了。&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://img14.360buyimg.com/n1/jfs/t1/119147/20/5048/404108/5eb260c6E8e88fd49/94ddfbc9426f974e.jpg&quot;&gt;
&lt;/figure&gt;

&lt;p&gt;进入&lt;a href=&quot;https://www.fyscu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大学 IT 技术社团&lt;/a&gt;之后，就一直想用自己学到的编程技术，来为学弟学妹解决我当年那般的痛苦。但彼时，我国&lt;strong&gt;政府部门信息公开&lt;/strong&gt;政策的保守和技术的落后，让我们很难获得好用的数据，商业平台又有巨大的封闭壁垒，遂作罢……&lt;/p&gt;
&lt;p&gt;直到前一阵子，FCC 一位城市社区组织者在群里分享了&lt;a href=&quot;https://cloud.tencent.com/tvp/member/157&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;黄希彤&lt;/a&gt;老师的&lt;a href=&quot;https://professortian.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;填教授&lt;/a&gt;公益项目，看到他&lt;strong&gt;把多年收集的公开数据用统计学方法进一步处理&lt;/strong&gt;，免费为广大考生做参考，内心十分激动！于是想尽自己现在的专长所能，帮黄老师优化一下前端界面，让广大的考生和家长用起来更方便。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Propaganda" scheme="https://fcc-cd.dev/categories/Article/Propaganda/"/>
    
    
      <category term="NGO" scheme="https://fcc-cd.dev/tags/NGO/"/>
    
      <category term="college" scheme="https://fcc-cd.dev/tags/college/"/>
    
      <category term="PWA" scheme="https://fcc-cd.dev/tags/PWA/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL + Koa + React 项目实践</title>
    <link href="https://fcc-cd.dev/article/engineering/graphql-koa-react-project-practice/"/>
    <id>https://fcc-cd.dev/article/engineering/graphql-koa-react-project-practice/</id>
    <published>2020-06-08T14:32:39.000Z</published>
    <updated>2020-06-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>源于 2019 年 11 月 16 日 <a href="https://fcc-cd.dev/">FCC 成都社区</a>主办的 <a href="https://web-conf.dev/#2019" target="_blank" rel="noopener">Web 全栈大会</a>上尹吉峰老师的 GraphQL 的分享，让我产生了浓厚的兴趣。GraphQL 是一个用于 API 的查询语言，是使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。</p><p>参考学习资料：</p><ul><li><a href="https://graphql.cn/learn/" target="_blank" rel="noopener">https://graphql.cn/learn/</a></li><li><a href="https://typescript.bootcss.com/basic-types.html" target="_blank" rel="noopener">https://typescript.bootcss.com/basic-types.html</a></li><li><a href="https://www.apollographql.com/docs/react/" target="_blank" rel="noopener">https://www.apollographql.com/docs/react/</a></li></ul><p>基于以上的一番学习，做了个实践的小项目，就代码做以下分析。</p><p>（附上项目地址：<a href="https://github.com/zhangyanling77/react-graphql-project" target="_blank" rel="noopener">react-graphql-project</a>）</p><a id="more"></a><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p>项目分为前端和后端两部分（目录 client 和 server），如图所示：</p><p><img src="9fj3stocj2s.webp" alt="目录截图"></p><p>使用技术栈：</p><ul><li><p>client：React hooks + TypeScript + Apollo + GraphQL + Ant Design</p></li><li><p>server: Koa 2 + GraphQL + koa-graphql + Mongoose</p></li></ul><h2 id="项目搭建及源码实现"><a href="#项目搭建及源码实现" class="headerlink" title="项目搭建及源码实现"></a>项目搭建及源码实现</h2><h3 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h3><p>使用的 MongoDB 数据库，这里对于该数据库的安装等不做赘述。</p><p>默认已经具备 MongoDB 的环境。接下来，启动数据库。</p><p>到 MongoDB 安装路径下，如 <strong>C:\Program Files\MongoDB\Server\4.2\bin</strong></p><p>打开终端，执行命令：</p><pre class=" language-bash"><code class="language-bash">mongod --dbpath<span class="token operator">=</span>./data</code></pre><p>创建项目总目录：react-graphql-project，并进入目录。</p><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><h4 id="创建项目，并初始化"><a href="#创建项目，并初始化" class="headerlink" title="创建项目，并初始化"></a>创建项目，并初始化</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> server <span class="token operator">&&</span> <span class="token function">cd</span> server<span class="token function">npm</span> init -y</code></pre><h4 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h4><pre class=" language-bash"><code class="language-bash">yarn add koa koa-grphql koa2-cors koa-mount koa-logger graphql</code></pre><h4 id="配置启动命令"><a href="#配置启动命令" class="headerlink" title="配置启动命令"></a>配置启动命令</h4><p><code>package.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nodemon index.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="业务开发"><a href="#业务开发" class="headerlink" title="业务开发"></a>业务开发</h4><h5 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h5><p><code>index.js</code></p><blockquote><p>这里我们启动一个 Koa 服务，进行日志监听，支持跨域操作，并将 GraphQL 服务挂到 Koa 服务上。<br>通过 koa-graphql 提供 HTTP 服务，传入 schema，并启动 graphiql。<br>graphiql 在测试和开发过程中都非常有用，但生产环境下应禁用它。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mount <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-mount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> graphqlHTTP <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-graphql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa2-cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> myGraphQLSchema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./schema"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 日志</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跨域支持</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    origin<span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    allowMethods<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">mount</span><span class="token punctuation">(</span>    <span class="token string">"/graphql"</span><span class="token punctuation">,</span>    <span class="token function">graphqlHTTP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      schema<span class="token punctuation">:</span> myGraphQLSchema<span class="token punctuation">,</span>      graphiql<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 开启graphiql可视化操作playground</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server started on 4000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h5><p>创建 model 文件 <code>model.js</code></p><blockquote><p>这里我们建立数据链接，定义 schema，并生成对应的 model 导出。<br>schema 是 mongoose 里会用到的一种数据模式，可以理解为表结构的定义。每个 schema 会映射到 MongoDB 中的一个 collection，它并不具备操作数据库的能力。<br>model 是由 schema 生成的模型，可以对数据库进行操作。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建数据库连接</span><span class="token keyword">const</span> conn <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于定义表结构</span><span class="token keyword">const</span> CategorySchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 增删改查</span><span class="token keyword">const</span> CategoryModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Category"</span><span class="token punctuation">,</span> CategorySchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  category<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 外键</span>    ref<span class="token punctuation">:</span> <span class="token string">"Category"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductModel <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Product"</span><span class="token punctuation">,</span> ProductSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  CategoryModel<span class="token punctuation">,</span>  ProductModel<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>schema.js</code></p><blockquote><p>定义查询的 schema 对象。在 GraphGL 中有许多内置的 Schema Types 可供我们用来定义字段名类型。<br>这里我们通过定义查询对象类型，通过 model 就可以对数据库进行增、删、改、查等相应操作了。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> graphql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'graphql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CategoryModel<span class="token punctuation">,</span> ProductModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>  GraphQLObjectType<span class="token punctuation">,</span>  GraphQLString<span class="token punctuation">,</span>  GraphQLSchema<span class="token punctuation">,</span>  GraphQLList<span class="token punctuation">,</span>  GraphQLNonNull<span class="token punctuation">}</span>  <span class="token operator">=</span> graphql<span class="token comment" spellcheck="true">// 分类类型定义</span><span class="token keyword">const</span> Category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Category'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> GraphQLString <span class="token punctuation">}</span><span class="token punctuation">,</span>      products<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLList</span><span class="token punctuation">(</span>Product<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> ProductModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> category<span class="token punctuation">:</span> parent<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> result        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 商品类型定义</span><span class="token keyword">const</span> Product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Product'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根查询对象</span><span class="token keyword">const</span> RootQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RootQuery'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getCategory<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 通过id获取分类</span>      type<span class="token punctuation">:</span> Category<span class="token punctuation">,</span>      args<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLNonNull</span><span class="token punctuation">(</span>GraphQLString<span class="token punctuation">)</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> CategoryModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> result      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ... 其他查询定义</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根变更对象</span><span class="token keyword">const</span> RootMutation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLObjectType</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'RootMutation'</span><span class="token punctuation">,</span>  fields<span class="token punctuation">:</span> <span class="token punctuation">{</span>    addCategory<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//根据name添加分类</span>      type<span class="token punctuation">:</span> Category<span class="token punctuation">,</span>      args<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLNonNull</span><span class="token punctuation">(</span>GraphQLString<span class="token punctuation">)</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">async</span> <span class="token function">resolve</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> CategoryModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token keyword">return</span> result      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ... 其他变更定义</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLSchema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  query<span class="token punctuation">:</span> RootQuery<span class="token punctuation">,</span>  mutation<span class="token punctuation">:</span> RootMutation<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><pre class=" language-bash"><code class="language-bash">yarn start</code></pre><p>访问 <a href="http://localhost:4000/graphql" target="_blank" rel="noopener">http://localhost:4000/graphql</a> 看到数据库操作 playground 界面。可进行一系列数据库 CRUD 操作。</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><pre class=" language-bash"><code class="language-bash">npx create-react-app client --template typescript</code></pre><h4 id="配置-webpack"><a href="#配置-webpack" class="headerlink" title="配置 webpack"></a>配置 webpack</h4><pre class=" language-bash"><code class="language-bash">yarn add react-app-rewired customize-cra</code></pre><p>更改 <code>package.json</code> 文件的 <code>scripts</code> 启动命令</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-app-rewired test"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在根目录下新建 <code>config-overrides.js</code> 文件，以添加 webpack 的相关配置。</p><p>安装前端 UI 组件库 <code>antd</code>，并配置按需加载、路径别名支持等。</p><pre class=" language-shell"><code class="language-shell">yarn add antd babel-plugin-import</code></pre><p><code>config-overrides.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> override<span class="token punctuation">,</span> fixBabelImports<span class="token punctuation">,</span> addWebpackAlias <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"customize-cra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    libraryName<span class="token punctuation">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>    libraryDirectory<span class="token punctuation">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>    style<span class="token punctuation">:</span> <span class="token string">"css"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">addWebpackAlias</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为 TS 无法识别，还需配置 tconfig.json 文件。</p></blockquote><p>新建 <code>paths.json</code> 文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更改 <code>tconfig.json</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES5"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"DOM"</span><span class="token punctuation">,</span> <span class="token string">"DOM.Iterable"</span><span class="token punctuation">,</span> <span class="token string">"ESNext"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./paths.json"</span><span class="token punctuation">}</span></code></pre><p>重启项目后生效。</p><h4 id="业务开发-1"><a href="#业务开发-1" class="headerlink" title="业务开发"></a>业务开发</h4><h5 id="入口文件-1"><a href="#入口文件-1" class="headerlink" title="入口文件"></a>入口文件</h5><p><code>index.tsx</code></p><blockquote><p>首先我们需要创建 Apollo 客户端，传入启动的后端地址作为 uri 的值，将生成的客户端实例通过 context 注入到整个单页应用中。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">import</span> ApolloClient <span class="token keyword">from</span> <span class="token string">"apollo-boost"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ApolloProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建apollo客户端</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApolloClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  uri<span class="token punctuation">:</span> <span class="token string">"http://localhost:4000/graphql"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator"><</span>ApolloProvider client<span class="token operator">=</span><span class="token punctuation">{</span>client<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator"><</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator"><</span><span class="token operator">/</span>ApolloProvider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件"></a>路由文件</h5><p><code>router.js</code></p><blockquote><p>主要包括商品列表页、商品详情等路由的配置。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Spin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Layouts <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/layouts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductList <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/pages/productlist"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductDetail <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/pages/productdetail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RouterComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>Router<span class="token operator">></span>      <span class="token operator"><</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator"><</span>Spin size<span class="token operator">=</span><span class="token string">"large"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>Layouts<span class="token operator">></span>          <span class="token operator"><</span>Switch<span class="token operator">></span>            <span class="token operator"><</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductList<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator"><</span>Route path<span class="token operator">=</span><span class="token string">"/detail/:id"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>ProductDetail<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator"><</span>Route render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator"><</span>h1<span class="token operator">></span><span class="token number">404</span> Not Found<span class="token operator"><</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator"><</span><span class="token operator">/</span>Switch<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Layouts<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Suspense<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="定义类型文件"><a href="#定义类型文件" class="headerlink" title="定义类型文件"></a>定义类型文件</h5><p><code>types.ts</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  products<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator"><</span>Product<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>  id<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  name<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  category<span class="token operator">?</span><span class="token punctuation">:</span> Category<span class="token punctuation">;</span>  categoryId<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h5><p><code>src/components/layouts</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Layout<span class="token punctuation">,</span> Menu <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> Header<span class="token punctuation">,</span> Content<span class="token punctuation">,</span> Footer <span class="token punctuation">}</span> <span class="token operator">=</span> Layout<span class="token punctuation">;</span><span class="token keyword">const</span> Layouts <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator"><</span>Layout className<span class="token operator">=</span><span class="token string">"layout"</span><span class="token operator">></span>    <span class="token operator"><</span>Header<span class="token operator">></span>      <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator"><</span>Menu        theme<span class="token operator">=</span><span class="token string">"dark"</span>        mode<span class="token operator">=</span><span class="token string">"horizontal"</span>        defaultSelectedKeys<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> lineHeight<span class="token punctuation">:</span> <span class="token string">"64px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        <span class="token operator"><</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>          <span class="token operator"><</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>商品管理<span class="token operator"><</span><span class="token operator">/</span>Link<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Menu<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Header<span class="token operator">></span>    <span class="token operator"><</span>Content style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token string">"50px 50px 0 50px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator"><</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span> padding<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> minHeight<span class="token punctuation">:</span> <span class="token number">280</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>      <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Content<span class="token operator">></span>    <span class="token operator"><</span>Footer style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> textAlign<span class="token punctuation">:</span> <span class="token string">"center"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      ©<span class="token number">2019</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> Created by zhangyanling77<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token string">" "</span><span class="token punctuation">}</span>    <span class="token operator"><</span><span class="token operator">/</span>Footer<span class="token operator">></span>  <span class="token operator"><</span><span class="token operator">/</span>Layout<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Layouts<span class="token punctuation">;</span></code></pre><h5 id="GraphQL-查询语句文件"><a href="#GraphQL-查询语句文件" class="headerlink" title="GraphQL 查询语句文件"></a>GraphQL 查询语句文件</h5><p><code>api.ts</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> gql <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"apollo-boost"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取所有的商品</span><span class="token keyword">export</span> <span class="token keyword">const</span> GET_PRODUCTS <span class="token operator">=</span> gql<span class="token template-string"><span class="token string">`  query {    getProducts {      id      name      category {        id        name        products {          id          name        }      }    }  }`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ... 其他查询语句定义</span></code></pre><h5 id="商品列表组件-ProductList"><a href="#商品列表组件-ProductList" class="headerlink" title="商品列表组件 ProductList"></a>商品列表组件 ProductList</h5><blockquote><p>实现商品列表展示、删除商品、新增商品等功能。</p></blockquote><p><img src="1patw3gmssb.webp" alt="商品列表页"></p><p><img src="xnh3kuvujl.webp" alt="删除商品"></p><p><img src="1tgd9h2osm8.webp" alt="新增商品"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ... 其他依赖引入</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery<span class="token punctuation">,</span> useMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  CATEGORIES_PRODUCTS<span class="token punctuation">,</span>  GET_PRODUCTS<span class="token punctuation">,</span>  ADD_PRODUCT<span class="token punctuation">,</span>  DELETE_PRODUCT<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">const</span> ProductList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 其他状态定义</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>CATEGORIES_PRODUCTS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>deleteProduct<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>DELETE_PRODUCT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ... 错误处理，加载中处理</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> getCategories<span class="token punctuation">,</span> getProducts <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">const</span> confirm <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> record<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除商品</span>    <span class="token keyword">await</span> <span class="token function">deleteProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      variables<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> record<span class="token operator">?</span><span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">,</span>      refetchQueries<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          query<span class="token punctuation">:</span> GET_PRODUCTS        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCurrent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>div<span class="token operator">></span>      <span class="token operator"><</span>Row style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token string">"0 0 20px 0"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">}</span><span class="token operator">></span>          <span class="token operator"><</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>            新增          <span class="token operator"><</span><span class="token operator">/</span>Button<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>Col<span class="token operator">></span>      <span class="token operator"><</span><span class="token operator">/</span>Row<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span>visible <span class="token operator">&&</span> <span class="token punctuation">(</span>        <span class="token operator"><</span>AddForm          handleOk<span class="token operator">=</span><span class="token punctuation">{</span>handleOk<span class="token punctuation">}</span>          handleCancel<span class="token operator">=</span><span class="token punctuation">{</span>handleCancel<span class="token punctuation">}</span>          categories<span class="token operator">=</span><span class="token punctuation">{</span>getCategories<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> AddForm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> handleOk<span class="token punctuation">,</span> handleCancel<span class="token punctuation">,</span> categories <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... 其他状态定义</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>addProduct<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>ADD_PRODUCT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleSubmit <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      variables<span class="token punctuation">:</span> product<span class="token punctuation">,</span>      refetchQueries<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 添加成功后执行查询全部商品的操作，是个回调</span>          query<span class="token punctuation">:</span> GET_PRODUCTS        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setProduct</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> categoryId<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空表单</span>    <span class="token function">handleOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>Modal      title<span class="token operator">=</span><span class="token string">"新增产品"</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token operator">></span>      <span class="token operator"><</span>Form<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>Form<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>Modal<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ProductList<span class="token punctuation">;</span></code></pre><h5 id="商品详情组件-ProductDetail"><a href="#商品详情组件-ProductDetail" class="headerlink" title="商品详情组件 ProductDetail"></a>商品详情组件 ProductDetail</h5><blockquote><p>根据 ID 查询商品详情及其所属商品分类下的所有商品。</p></blockquote><p><img src="8bfps0iinjw.webp" alt="商品详情"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@apollo/react-hooks"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> GET_PRODUCT <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/api"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Product <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/types"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProductDetail <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _id <span class="token operator">=</span> props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>GET_PRODUCT<span class="token punctuation">,</span> <span class="token punctuation">{</span>    variables<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> _id <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ... 错误处理</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> getProduct <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    id<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    category<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> categoryId<span class="token punctuation">,</span> name<span class="token punctuation">:</span> categoryName<span class="token punctuation">,</span> products <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> getProduct<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator"><</span>div<span class="token operator">></span>      <span class="token operator"><</span>Card title<span class="token operator">=</span><span class="token string">"商品详情"</span> bordered<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token string">"100%"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator"><</span>div<span class="token operator">></span>          <span class="token operator"><</span>p<span class="token operator">></span>            <span class="token operator"><</span>b<span class="token operator">></span>商品ID：<span class="token operator"><</span><span class="token operator">/</span>b<span class="token operator">></span>            <span class="token punctuation">{</span>id<span class="token punctuation">}</span>          <span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator"><</span>p<span class="token operator">></span>            <span class="token operator"><</span>b<span class="token operator">></span>商品名称：<span class="token operator"><</span><span class="token operator">/</span>b<span class="token operator">></span>            <span class="token punctuation">{</span>name<span class="token punctuation">}</span>          <span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token comment" spellcheck="true">// ... 商品列表展示</span>      <span class="token operator"><</span><span class="token operator">/</span>Card<span class="token operator">></span>    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ProductDetail<span class="token punctuation">;</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过这个项目实践，基本掌握了 GraphQL 的使用。虽然这个项目只包含了简单的 CRUD 功能，但是对后端、数据库、前端都涉及到了，因此对于学习拓展来说也是不错的。后续也继续实现了登录验证、个人中心等功能，这里不做详细介绍，可自行查看项目代码了解。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;源于 2019 年 11 月 16 日 &lt;a href=&quot;https://fcc-cd.dev/&quot;&gt;FCC 成都社区&lt;/a&gt;主办的 &lt;a href=&quot;https://web-conf.dev/#2019&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web 全栈大会&lt;/a&gt;上尹吉峰老师的 GraphQL 的分享，让我产生了浓厚的兴趣。GraphQL 是一个用于 API 的查询语言，是使用基于类型系统来执行查询的服务端运行时（类型系统由你的数据定义）。一个 GraphQL 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。&lt;/p&gt;
&lt;p&gt;参考学习资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://graphql.cn/learn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://graphql.cn/learn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://typescript.bootcss.com/basic-types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://typescript.bootcss.com/basic-types.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/docs/react/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.apollographql.com/docs/react/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于以上的一番学习，做了个实践的小项目，就代码做以下分析。&lt;/p&gt;
&lt;p&gt;（附上项目地址：&lt;a href=&quot;https://github.com/zhangyanling77/react-graphql-project&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-graphql-project&lt;/a&gt;）&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="React" scheme="https://fcc-cd.dev/tags/React/"/>
    
      <category term="GraphQL" scheme="https://fcc-cd.dev/tags/GraphQL/"/>
    
      <category term="Apollo" scheme="https://fcc-cd.dev/tags/Apollo/"/>
    
      <category term="Koa" scheme="https://fcc-cd.dev/tags/Koa/"/>
    
      <category term="MongoDB" scheme="https://fcc-cd.dev/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 效率工具</title>
    <link href="https://fcc-cd.dev/article/engineering/javascript-efficiency-utility/"/>
    <id>https://fcc-cd.dev/article/engineering/javascript-efficiency-utility/</id>
    <published>2020-06-08T02:15:48.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每当看到发在 <a href="https://fcc-cd.dev/">FCC 成都社区</a>群里的技术文章，<a href="https://github.com/TechQuery" target="_blank" rel="noopener">水歌</a>都忍不住去指出它的不足。</p><p>今天评注的文章题为<a href="https://mp.weixin.qq.com/s/4oQc_SYxK4vIKCWWOKwoCw" target="_blank" rel="noopener">《一批提升你工作效率的 JS 工具方法》</a>，文中的 60 个方法与<a href="https://git-pager.leanapp.cn/article/engineering/ecmascript-dom-skills/" target="_blank" rel="noopener">上次评注的“24 个 ES 方法”</a>类似，不够<strong>简洁</strong>、<strong>优雅</strong>，与<strong>最新 ECMAScript、DOM 标准</strong>有些差距，有些“复制粘贴老文章片段”的感觉。</p><p>接下来，我就按功能类别来对一些有必要优化的工具方法一一重构。</p><a id="more"></a><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>完全基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则表达式</a>的检验规则其实可以不用封装成函数，全放在独立的模块中，导入后直接 <code>/regexp/.test(data)</code> 即可。</p><h3 id="电邮地址"><a href="#电邮地址" class="headerlink" title="电邮地址"></a>电邮地址</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> Email <span class="token operator">=</span> <span class="token regex">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原文：/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]{2,3}){1,2})$/</span></code></pre><p>「注解」</p><ul><li><code>\w</code> 即为 <code>[a-zA-Z0-9_]</code></li><li><code>[]</code> 表示一个<strong>字符范围</strong>，就是一个整体，无需 <code>()</code> 包围</li><li>Gmail 等服务商还支持形如 <code>name.filter@gmail.com</code> 这样的用户别名邮箱</li><li><code>(.[a-zA-Z0-9_-]{2,3}){1,2}</code> 只适用于前些年常见的 <code>.cn</code>、<code>.com.cn</code> 一类根域名，近几年新增的 <code>.name</code>、<code>.info</code>、<code>.club</code>、<code>.camp</code> 等域名就失效了，形如 <code>vip.xxmail.com</code> 的多级域名也不适用</li></ul><h3 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码"></a>手机号码</h3><p>其实以下只适用于中国大陆手机号，其它国家手机号似乎与固定电话号之间没有明显的区分。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> Mobile <span class="token operator">=</span> <span class="token regex">/^1[3-9]\d{9}$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原文：/^1[0-9]{10}$/</span></code></pre><p>「注解」</p><ul><li><code>\d</code> 即为 <code>[0-9]</code></li><li>中国大陆手机号第二位目前没有 1、2</li></ul><h3 id="固话号码"><a href="#固话号码" class="headerlink" title="固话号码"></a>固话号码</h3><p>中国大陆固定电话号码“区号 + 机号”始终为 11 位。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> Phone <span class="token operator">=</span> <span class="token regex">/^((0\d{2}-)?\d{8}|(0\d{3}-)?\d{7})$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原文：/^([0-9]{3,4}-)?[0-9]{7,8}$/</span></code></pre><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> URL <span class="token operator">=</span> <span class="token regex">/^\w+:\/\/\S+$/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 原文：/^http[s]?:\/\/.*/</span></code></pre><p>「注解」</p><ul><li>URL 协议不仅包括 <code>http</code>、<code>https</code>，还有 <code>ftp</code>（文件传输）、<code>file</code>（本机文件系统）、<code>ed2k</code>（电驴 2000）等各种各样的<strong>网络协议</strong></li><li>URL 主机名、路径可以是 <a href="https://home.unicode.org/" target="_blank" rel="noopener">Unicode</a> 中各种<strong>可见字符</strong>，但遇到空白符就结束</li></ul><h3 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h3><p>判断是否为合法的日期格式除了用正则之外，还可利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/Date" target="_blank" rel="noopener"><code>Date</code> 构造函数</a>内部的算法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> isDate <span class="token operator">=</span> raw <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于无法解析为日期的数据，<code>date.toString()</code> 会返回“Invalid Date”，<code>date.getTime()</code> 对应的返回值则是 <code>NaN</code>。而<strong>算数运算符</strong>会调用对象的 <code>valueOf()</code> 方法，<code>date.valueOf()</code> 的返回值又与 <code>date.getTime()</code> 相同。</p><h3 id="汉字"><a href="#汉字" class="headerlink" title="汉字"></a>汉字</h3><p>“汉字”在计算机领域的学名叫<strong>中日韩统一表意文字</strong>（俗称 CJK），在 2017 年 6 月发布的 Unicode 10 标准中，它有了代码级明确的指代：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> HanZi <span class="token operator">=</span> <span class="token regex">/\p{Unified_Ideograph}/u</span><span class="token punctuation">;</span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/33335629" target="_blank" rel="noopener">【详情参考】</a></p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>学习：正则分析器 <a href="https://regexr.com/" target="_blank" rel="noopener">RegExr</a>、<a href="https://regex101.com/" target="_blank" rel="noopener">Regex101</a></li><li>前端：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Forms/Data_form_validation" target="_blank" rel="noopener">HTML 5 表单校验 API</a></li><li>后端：<a href="https://github.com/typestack/class-validator" target="_blank" rel="noopener">基于装饰器的数据校验</a></li></ul><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h3 id="阿拉伯数字转中文"><a href="#阿拉伯数字转中文" class="headerlink" title="阿拉伯数字转中文"></a>阿拉伯数字转中文</h3><p>ECMA-402 标准（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener">ECMAScript 国际化 API</a>）把各语言之间的<strong>数据格式转换算法</strong>都封装好了，我们引入 polyfill 就可以直接用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> toChineseNumber <span class="token operator">=</span> raw <span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">new</span> <span class="token class-name">Intl<span class="token punctuation">.</span>NumberFormat</span><span class="token punctuation">(</span><span class="token string">"zh-Hans-u-nu-hanidec"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>判断一个值的类型，用比较<strong>构造函数名</strong>或<strong>类名</strong>的方式兼容性比较差，因为线上环境通常是压缩后的代码，自定义的函数名、类名不再是原名，应用开发者一般也不会实现 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noopener"><code>Symbol.toStringTag</code> getter 类成员</a>，导致 <code>Object.prototype.toString.call()</code> 只会返回默认值 <code>[object Object]</code>。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>综上，我们应该利用 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance" target="_blank" rel="noopener">JavaScript 原型继承</a>，来统一判断“值的类型归属”：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> isType <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> constructor<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span><span class="token punctuation">;</span></code></pre><p>「注解」</p><ul><li><code>Object</code> 构造函数会返回所有基本值的包装对象</li></ul><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>下面，我再给出一个 TypeScript 的实现，让<strong>类型推断</strong>更加准确：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> isType<span class="token operator"><</span>T<span class="token operator">></span><span class="token punctuation">(</span>  value<span class="token punctuation">:</span> T<span class="token punctuation">,</span>  <span class="token keyword">constructor</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> value is T <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">Object</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> isType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./utility"</span><span class="token punctuation">;</span><span class="token keyword">let</span> test<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isType</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://www.typescriptlang.org/play/index.html#code/GYVwdgxgLglg9mABDAzgFQJ4AcCmAeNAPgAoA3AQwBsQcAuRNAGkQgRSgCcRo4P6BvRGBwB3YgDpJAE3JRy9cmAwBtALoBKemkQBfTYgrUcyFA0T8AUImuIOOKCA5IA8gCMAVjmhkqNdcjB2RQgcOGAWNk5uKF4AbgsdCwtKe0QoHHZ4ixhw4lRMXGJ09mYAORAAW1ccDnV-VkC4FPFKOABzIoyoAEJxGIAxGAAPHCliACY62KA" target="_blank" rel="noopener">【在编辑器中体验 TS 类型提示】</a></p><h2 id="浏览器检测"><a href="#浏览器检测" class="headerlink" title="浏览器检测"></a>浏览器检测</h2><p>以下使用 <code>globalThis</code> 是为了兼容浏览器主线程、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WorkerGlobalScope" target="_blank" rel="noopener">Web Worker</a>、<a href="https://nodejs.org/dist/latest-v12.x/docs/api/globals.html#globals_global" target="_blank" rel="noopener">Node.js</a>、<a href="https://doc.deno.land/https/github.com/denoland/deno/releases/latest/download/lib.deno.d.ts" target="_blank" rel="noopener">Deno</a> 等不同 JavaScript 运行时环境。</p><h3 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> isBrowserVendor <span class="token operator">=</span> <span class="token punctuation">(</span>  name<span class="token punctuation">,</span>  UA <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>navigator<span class="token operator">?</span><span class="token punctuation">.</span>userAgent <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> UA<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> isRobot <span class="token operator">=</span> <span class="token punctuation">(</span>UA <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>navigator<span class="token operator">?</span><span class="token punctuation">.</span>userAgent <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token regex">/bot|spider|crawler/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>UA<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="去除-HTML-标签"><a href="#去除-HTML-标签" class="headerlink" title="去除 HTML 标签"></a>去除 HTML 标签</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>以下使用了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet" target="_blank" rel="noopener">non-greedy（非贪婪模式）</a>来提升性能，并规避正文中可能出现的示例代码没完全转译尖括号，导致删除错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> removeHtmlTag <span class="token operator">=</span> raw <span class="token operator">=</span><span class="token operator">></span> raw<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/<[\s\S]+?>/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h3><p>下面再提供一种借助 DOM 引擎的实现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeHtmlTag</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>  box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> raw<span class="token punctuation">;</span>  <span class="token keyword">return</span> box<span class="token punctuation">.</span>content<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="URL-参数追加"><a href="#URL-参数追加" class="headerlink" title="URL 参数追加"></a>URL 参数追加</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" target="_blank" rel="noopener"><code>URL()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noopener"><code>URLSearchParams()</code></a> 在浏览器主线程、Web Worker、Node.js 10+、Deno 均全局可用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">appendQuery</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> data<span class="token punctuation">,</span> base <span class="token operator">=</span> globalThis<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> URI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> searchParams <span class="token punctuation">}</span> <span class="token operator">=</span> URI<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> searchParams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> URI <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="W3C、ECMA-标准"><a href="#W3C、ECMA-标准" class="headerlink" title="W3C、ECMA 标准"></a>W3C、ECMA 标准</h2><p>还有一些可以用新标准（部分为提案）直接实现的特性，集中罗列如下：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener"><code>.trim()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft" target="_blank" rel="noopener"><code>.trimStart()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight" target="_blank" rel="noopener"><code>.trimEnd()</code></a>（原文第 53 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener"><code>.includes()</code></a>（原文第 42 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from()</code></a>（原文第 48 条）</li><li><a href="https://github.com/TechQuery/array-unique-proposal" target="_blank" rel="noopener">数组去重</a>（原文第 44 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E5%8A%A8%E6%80%81import" target="_blank" rel="noopener">动态 <code>import</code></a>（原文第 27 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList" target="_blank" rel="noopener"><code>element.classList</code></a>（原文第 29 ~ 31 条）</li><li><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener"><code>saveAs()</code></a>（原文第 28 条）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-transform" target="_blank" rel="noopener"><code>text-transform</code></a>（原文第 54 条）</li></ul><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><p><img src="https://web-cell.dev/WebCell-1.fb612fdb.png" alt="WebCell"></p><p>水歌把日常开发中积累的各种工具方法，用 TypeScript 写成一个 <strong>Web 开源工具库</strong> —— <a href="https://web-cell.dev/web-utility/" target="_blank" rel="noopener">https://web-cell.dev/web-utility/</a> ，欢迎大家使用、改进！~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每当看到发在 &lt;a href=&quot;https://fcc-cd.dev/&quot;&gt;FCC 成都社区&lt;/a&gt;群里的技术文章，&lt;a href=&quot;https://github.com/TechQuery&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;水歌&lt;/a&gt;都忍不住去指出它的不足。&lt;/p&gt;
&lt;p&gt;今天评注的文章题为&lt;a href=&quot;https://mp.weixin.qq.com/s/4oQc_SYxK4vIKCWWOKwoCw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《一批提升你工作效率的 JS 工具方法》&lt;/a&gt;，文中的 60 个方法与&lt;a href=&quot;https://git-pager.leanapp.cn/article/engineering/ecmascript-dom-skills/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上次评注的“24 个 ES 方法”&lt;/a&gt;类似，不够&lt;strong&gt;简洁&lt;/strong&gt;、&lt;strong&gt;优雅&lt;/strong&gt;，与&lt;strong&gt;最新 ECMAScript、DOM 标准&lt;/strong&gt;有些差距，有些“复制粘贴老文章片段”的感觉。&lt;/p&gt;
&lt;p&gt;接下来，我就按功能类别来对一些有必要优化的工具方法一一重构。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="ECMAScript" scheme="https://fcc-cd.dev/tags/ECMAScript/"/>
    
      <category term="DOM" scheme="https://fcc-cd.dev/tags/DOM/"/>
    
      <category term="BOM" scheme="https://fcc-cd.dev/tags/BOM/"/>
    
      <category term="API" scheme="https://fcc-cd.dev/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题之验证栈序列</title>
    <link href="https://fcc-cd.dev/article/algorithm/verify-stack-sequence/"/>
    <id>https://fcc-cd.dev/article/algorithm/verify-stack-sequence/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>先说一个消息，为了方便互相交流学习，青铜三人行建了个微信群，感兴趣的伙伴可以扫码加下面的小助手抱你入群哦！</p><figure>    <img src="https://pic2.zhimg.com/80/v2-ce9c805020726a8a18c4c870a8282985_1440w.jpg">    <figcaption>青铜三人行小助手（其实是 Helen）</figcaption></figure><hr><p>每周一题，代码无敌~ 这次的主题是 <strong>「贪心算法」</strong>：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=668415886&bvid=BV1ta4y1v7h8&cid=200192481&page=1"></iframe><a id="more"></a><h2 id="验证栈序列"><a href="#验证栈序列" class="headerlink" title="验证栈序列"></a><a href="https://leetcode-cn.com/problems/validate-stack-sequences/" target="_blank" rel="noopener">验证栈序列</a></h2><p>给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code>。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]输出：true解释：我们可以按以下顺序执行：push(1), push(2), push(3), push(4), pop() -> 4,push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]输出：false解释：1 不能在 2 之前弹出。</code></pre><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol><li><code>0 <= pushed.length == popped.length <= 1000</code></li><li><code>0 <= pushed[i], popped[i] < 1000</code></li><li><code>pushed</code> 是 <code>popped</code> 的排列</li></ol><h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><p>要做这道题，首先得了解一下什么是 <strong>「栈」</strong>。为此书香搬来了<strong>维基百科</strong>上的解释：</p><blockquote><p><strong>堆栈</strong>（英语：stack）又称为<strong>栈</strong>或<strong>堆叠</strong>，是<a href="https://zh.wikipedia.org/wiki/%25E8%25A8%2588%25E7%25AE%2597%25E6%25A9%259F%25E7%25A7%2591%25E5%25AD%25B8" target="_blank" rel="noopener">计算机科学</a>中的一种<a href="https://zh.wikipedia.org/wiki/%25E6%258A%25BD%25E8%25B1%25A1%25E8%25B3%2587%25E6%2596%2599%25E5%259E%258B%25E5%2588%25A5" target="_blank" rel="noopener">抽象数据类型</a>，只允许在有序的线性数据集合的一端（称为堆栈顶端，英语：top）进行加入数据（英语：push）和移除数据（英语：pop）的运算。因而按照后进先出（LIFO, Last In First Out）的原理运作。</p></blockquote><blockquote><p><strong>栈</strong>常与另一种有序的线性数据集合<a href="https://zh.wikipedia.org/wiki/%25E4%25BD%2587%25E5%2588%2597" target="_blank" rel="noopener">队列</a>相提并论。 <strong>栈</strong>常用一维<a href="https://zh.wikipedia.org/wiki/%25E9%2599%25A3%25E5%2588%2597" target="_blank" rel="noopener">数组</a>或<a href="https://zh.wikipedia.org/wiki/%25E9%2580%25A3%25E7%25B5%2590%25E4%25B8%25B2%25E5%2588%2597" target="_blank" rel="noopener">链表</a>来实现。</p></blockquote><p>这个定义看起来多，其实也没什么大不了的。<strong>栈</strong>本身就是一个<strong>数组</strong>或者<strong>链表</strong>，只是<strong>人为定义</strong>它获取数据的方式只能从栈的<strong>顶端</strong>获取，因此遵循<strong>先进后出、后进先出</strong>的规则罢了。</p><p>想象<strong>栈</strong>就是一摞盘子，你只能在最上面放盘子或者拿走盘子。对应起来，栈的操作就有两个：</p><ul><li>push 操作，往栈顶放入一个数据。</li><li>pop 操作，从栈顶取走一个数据。</li></ul><p><img src="https://pic1.zhimg.com/80/v2-413de4df18cc333944027e29514aa99c_1440w.jpg" alt></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>回到这道题目，一开始看起来题目有点绕，让人不知道要做什么。后来 Helen 提议，既然题目要求是考虑在<em>最初空栈上进行的推入 push 和弹出 pop 操作</em>，那么我们不妨就建立一个<strong>空栈</strong>尝试用程序的方式来模拟一遍操作的流程，看看会不会明朗点：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>pushed<span class="token punctuation">,</span> popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pushed<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样我们就建立了一个<strong>栈</strong>，并且在按题目中 <code>pushed</code> 数组的顺序将元素 <code>push</code> 进栈， 然后再按照<strong>同样的顺序</strong> <code>pop</code> 出去。</p><p>不过这样子就跟数学题里面一边放水，一边加水的疯狂管理员一般，返回的结果肯定为 <code>true</code>。</p><p>回头再看看题目，发现其实就是在这个<strong>一边增加一边移出</strong>的过程上，添加了一个条件：只能按照 <code>poped</code> 的顺序来 <code>pop</code> 数据，看看能不能将 <code>stack</code> 清空 。</p><p>再拆解一下目标，就更明确了：</p><ul><li>按照 <code>pushed</code> 的顺序将元素 <code>push</code> 入栈。</li><li>在 <code>push</code> 的过程中尝试 <code>pop</code> 元素。</li><li><code>pop</code> 元素的顺序要和 <code>poped</code> 的顺序一样。</li></ul><p>要满足这三个条件，一个方法就是，<strong>尝试在 <code>push</code> 的每一步时，尽可能按照指定顺序 <code>pop</code> 出所有的元素</strong>。根据这个思路，Helen 给出了题解：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>pushed<span class="token punctuation">,</span> popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> popIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> pushed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&&</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> popped<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      popIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>书香的思路一模一样，只是把代码写的更短了点 ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>pushed<span class="token punctuation">,</span> popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pushed<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&&</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      popped<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Extra-Go"><a href="#Extra-Go" class="headerlink" title="Extra Go"></a>Extra Go</h3><p>对于书香和 Helen 这样的初级选手，通过实现一个<strong>栈</strong>结构来模拟题目中要求的操作，解出题目，就已经开心地到一边去玩耍了 ~</p><p>但对于追求完美的曾大师来说，<code>push</code> 和 <code>pop</code> 这两个操作，都非常消耗计算资源。而这种把数据一边 <code>push</code> 一边 <code>pop</code> 的疯狂操作显然是不能容忍的。</p><p>为此，他写出了 <strong>2 米长</strong>的 Go 语言代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>pushed <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> popped <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>popped<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    pushedValues <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//存储所有的已经入栈的值和数组索引</span>    left <span class="token operator">:=</span> <span class="token number">0</span>    right <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>pushed<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> popped<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">// 出栈</span>            left <span class="token operator">=</span> i<span class="token number">-1</span>            right <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            pushedValues<span class="token punctuation">[</span>pushed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>popped<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> pushedValues<span class="token punctuation">[</span>popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 值已经加入stack了</span>            <span class="token keyword">for</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> pushed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>                    left<span class="token operator">--</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> left <span class="token operator"><</span> <span class="token number">0</span> <span class="token punctuation">{</span>                left <span class="token operator">=</span> <span class="token number">0</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pushed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 值相等，出栈</span>                 pushed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                 left<span class="token operator">--</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 值没有加入stack，继续往前找</span>             <span class="token keyword">for</span> right <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> popped<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> pushed<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到了</span>                    pushed<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//出栈</span>                    left <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 重新赋值left</span>                    right <span class="token operator">++</span>  <span class="token comment" spellcheck="true">// 重新赋值right</span>                    <span class="token keyword">break</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有找到，继续往前</span>                    pushedValues<span class="token punctuation">[</span>pushed<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> right                    right<span class="token operator">++</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>嗯…… 8 ms 的运行时间……</p><p><img src="https://pic4.zhimg.com/80/v2-14d286e072f598b6b8ea2728f07a1d8b_1440w.jpg" alt></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>不知道你有没有发现，这道题目，在开始的时候看起来比较绕，但是真正实现起来并没有那么困难？</p><p>其实关键点在于 <strong>「分而治之」</strong>，将任务中的每一步拆分开来，并且在每一步时，都<strong>尽可能去寻找最优解</strong>，再将每一步的最优解达到合起来，看是否能达成目标。</p><p>这种思路的算法就称为 <strong>「贪心算法」</strong>，它在遇到<strong>寻找最优解</strong>问题的情况下，能够提供很大的帮助。</p><p>下次见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;先说一个消息，为了方便互相交流学习，青铜三人行建了个微信群，感兴趣的伙伴可以扫码加下面的小助手抱你入群哦！&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://pic2.zhimg.com/80/v2-ce9c805020726a8a18c4c870a8282985_1440w.jpg&quot;&gt;
    &lt;figcaption&gt;青铜三人行小助手（其实是 Helen）&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;p&gt;每周一题，代码无敌~ 这次的主题是 &lt;strong&gt;「贪心算法」&lt;/strong&gt;：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=668415886&amp;bvid=BV1ta4y1v7h8&amp;cid=200192481&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
      <category term="数据结构" scheme="https://fcc-cd.dev/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆栈" scheme="https://fcc-cd.dev/tags/%E5%A0%86%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】外篇之循环与递归</title>
    <link href="https://fcc-cd.dev/article/algorithm/loop-and-recursion/"/>
    <id>https://fcc-cd.dev/article/algorithm/loop-and-recursion/</id>
    <published>2020-06-01T18:03:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>不知不觉青铜三人行已经做了两个月的题了，这次轻松点，看看不一样的吧。</p><h2 id="机器擅长的事-——-重复"><a href="#机器擅长的事-——-重复" class="headerlink" title="机器擅长的事 —— 重复"></a>机器擅长的事 —— 重复</h2><p>作为专业的程序猿，经常被行业外的朋友问到，为什么要学习编程？其实，除了掌握技能提高工作效率、甚至成为职业以外。学习编程更重要的是：<strong>思维训练</strong>。</p><p>其实，计算机从一开始就是为了帮助人们解决复杂问题而设计出来的。而在这个过程中，计算机程序的「思考」模型是一个叫“图灵机”的计算模型，图灵机是图灵 (<strong>Alan Mathison Turing</strong>) 祖师爷模拟人思考而发明出来的。为什么图灵祖师爷要发明图灵机呢？是因为他想要试图以自己和自己周围的天才科学家的思维方式作为人类的具体实例，来抽象总结出一套解决问题的办法。所以说，计算机程序的运作方式其实是一种人类尝试<strong>用简单的方式逐步去解决复杂问题</strong>的天才的思考方式。</p><a id="more"></a><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="https://insights.thoughtworks.cn/think-as-a-machine/"></iframe><p>在如今的时代，计算机早已经充斥在我们生活的方方面面，想要更好地进行人机交互，或多或少地我们都需要一些「像机器一样」的思考方式。即使是作为专业程序员，不断培养自己<strong>像机器一样思考</strong>的思维模式也是必不可少的。</p><p>既然要像机器一样去思考，那么不妨从计算机最擅长的事情 —— 重复，开始说起吧。下面是来自 <em>TED-Ed</em> 中「<a href="https://ed.ted.com/search?qs=think+like+a+coder" target="_blank" rel="noopener">Think like coder</a>」系列课程的第一节，讲的就是计算机的重复 —— 循环。</p><iframe frameborder="0" allowfullscreen allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" src="https://www.youtube.com/embed/KFVdHDMcepw"></iframe><h2 id="各种编程语言的循环"><a href="#各种编程语言的循环" class="headerlink" title="各种编程语言的循环"></a>各种编程语言的循环</h2><p>来看看在实际编程中，不同编程语言的循环写法有什么不同吧！</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> jj<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>jj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jj <span class="token operator"><</span> <span class="token number">10</span><span class="token punctuation">;</span> jj<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> jj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => prints "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// for loop structure => for(<start_statement>; <conditional>; <step>)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> fooFor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fooFor <span class="token operator"><</span> <span class="token number">10</span><span class="token punctuation">;</span> fooFor<span class="token operator">++</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fooFor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Iterated 10 times, fooFor 0->9</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fooFor Value: "</span> <span class="token operator">+</span> fooFor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// will run 5 times</span><span class="token punctuation">}</span></code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"mouse"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>animals<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span></code></pre><h4 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h4><pre class=" language-rust"><code class="language-rust"> <span class="token comment" spellcheck="true">// Ranges</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0u32</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">{</span>    <span class="token function">print!</span><span class="token punctuation">(</span><span class="token string">"{} "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// prints `0 1 2 3 4 5 6 7 8 9 `</span></code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator"><</span> <span class="token number">3</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ++ is a statement.</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"iteration"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// for each pair in the map, print key and value</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key=%s, value=%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ii <span class="token operator"><</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ANY value less than ten is true.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> ii<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ii++ increments ii AFTER using its current value.</span><span class="token comment" spellcheck="true">// => prints "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, "</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> fooWhile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>fooWhile <span class="token operator"><</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fooWhile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Increment the counter</span>    <span class="token comment" spellcheck="true">// Iterated 100 times, fooWhile 0,1,2...99</span>    fooWhile<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fooWhile Value: "</span> <span class="token operator">+</span> fooWhile<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// As does `while`.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// An infinite loop!</span><span class="token punctuation">}</span></code></pre><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> x <span class="token operator"><</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># Shorthand for x = x + 1</span></code></pre><h4 id="Rust-1"><a href="#Rust-1" class="headerlink" title="Rust"></a>Rust</h4><pre class=" language-rust"><code class="language-rust"> <span class="token keyword">while</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The universe is operating normally."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// break statement gets out of the while loop.</span>    <span class="token comment" spellcheck="true">//  It avoids useless iterations.</span>    <span class="token keyword">break</span><span class="token punctuation">}</span></code></pre><h4 id="Go-1"><a href="#Go-1" class="headerlink" title="Go"></a>Go</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Go 语言里面只有 for 循环，但是 for 循环可以不加范围</span><span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Infinite loop.</span>    <span class="token keyword">break</span>    <span class="token comment" spellcheck="true">// Just kidding.</span>    <span class="token keyword">continue</span> <span class="token comment" spellcheck="true">// Unreached.</span><span class="token punctuation">}</span></code></pre><h3 id="循环的本质"><a href="#循环的本质" class="headerlink" title="循环的本质"></a>循环的本质</h3><p>事实上，不管循环本身的写法和描述有什么改变，它的本质都是一种<strong>逻辑判断</strong>。也就是说，它们从根本上都是 <code>until</code> 循环的类型：</p><blockquote><p>当某条件满足的时候跳转到循环结束的地方，不然就跳转回循环开始的地方</p></blockquote><p>而基本所有的循环最后大概都会被编译成以下的样子，这叫做<strong>汇编语言</strong>，它是最接近计算机的思考方式的编程语言了。</p><pre class=" language-assembly"><code class="language-assembly">    mov eax, val1        ; 把变量 val1 放到 EAX 里面beginwhile:    cmp eax, val2        ; 比较 val1 和 val2    jnl     endwhile     ; 如果 val1 不小于 val2，就跳到 endwhile 的地方    inc    eax           ; val1++;    dec    val2          ; val2--;    jmp    beginwhile    ; 跳回到 beginwhile 的地方endwhile:    mov    val1, eax     ;保存 val1 的新值</code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>循环有一对「孪生兄弟」叫做<strong>递归</strong>。它们的作用都在于解决「重复」的事情。所不同的在于它们对于「重复」的部分的抽象描述不同</p><ul><li>如果把要重复执行的指令放在一个「块」里面，称为<strong>循环体</strong>，并通过外部变量来调整每次循环执行的数据，就叫做<strong>循环。</strong></li><li>如果把要重复执行的指令抽象成「函数」，并通过传参数的形式来调整每次执行的数据，就称作<strong>递归</strong>啦！</li></ul><p>关于递归的详情可以看看来自 Helen 的视频讲解：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=753456083&bvid=BV1ok4y1B7Cj&cid=197572573&page=1"></iframe><h2 id="后面"><a href="#后面" class="headerlink" title="后面"></a>后面</h2><p>好啦，这次并没有做题，要讲的内容就这么多啦。有时候换换心情和视野也是很重要的，希望这次的内容可以当做故事看看，了解一些更多的事情。下次见啦！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;不知不觉青铜三人行已经做了两个月的题了，这次轻松点，看看不一样的吧。&lt;/p&gt;
&lt;h2 id=&quot;机器擅长的事-——-重复&quot;&gt;&lt;a href=&quot;#机器擅长的事-——-重复&quot; class=&quot;headerlink&quot; title=&quot;机器擅长的事 —— 重复&quot;&gt;&lt;/a&gt;机器擅长的事 —— 重复&lt;/h2&gt;&lt;p&gt;作为专业的程序猿，经常被行业外的朋友问到，为什么要学习编程？其实，除了掌握技能提高工作效率、甚至成为职业以外。学习编程更重要的是：&lt;strong&gt;思维训练&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其实，计算机从一开始就是为了帮助人们解决复杂问题而设计出来的。而在这个过程中，计算机程序的「思考」模型是一个叫“图灵机”的计算模型，图灵机是图灵 (&lt;strong&gt;Alan Mathison Turing&lt;/strong&gt;) 祖师爷模拟人思考而发明出来的。为什么图灵祖师爷要发明图灵机呢？是因为他想要试图以自己和自己周围的天才科学家的思维方式作为人类的具体实例，来抽象总结出一套解决问题的办法。所以说，计算机程序的运作方式其实是一种人类尝试&lt;strong&gt;用简单的方式逐步去解决复杂问题&lt;/strong&gt;的天才的思考方式。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 打包文件分析（下）</title>
    <link href="https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-1/"/>
    <id>https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-1/</id>
    <published>2020-05-27T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一篇<a href="/article/webpack-bundle-analyse-0/">webpack 打包文件分析（上）</a>我们讲到 <code>webpack</code> 打包源码中文件加载的部分，通过分析了解了在 <code>webpack</code> 中不同模块规范相互加载的处理。而至此，只包括了文件的<strong>同步加载</strong>分析，对于文件的异步加载又是如何处理的呢？</p><p>我们使用 <code>webpack</code> 将项目打包为一个 <code>bundle.js</code> 文件，通过 <code>script</code> 标签插入到页面中引用。但如果这个 <code>bundle.js</code> 体积特别大，就会导致我们加载时间过长，阻塞页面的渲染。</p><p>其次，这个打包出来的 <code>bundle.js</code> 中其实部分的代码资源是当前加载页面用不到的，这样也导致了浪费。于是，资源加载的优化就成了必须要考虑的问题，而异步加载（或者说动态加载）就是解决这个问题的方案之一。</p><a id="more"></a><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><p>在 <code>webpack</code> 中提供了符合 <a href="https://tc39.es/proposal-dynamic-import/" target="_blank" rel="noopener">ECMAScript 的 <code>import()</code> 语法</a>，允许我们动态的加载模块。（在 <code>webpack</code> 版本较低时，我们使用的代码动态加载方案是 <code>require.ensure</code> 方法，后面已经被 <code>import()</code> 取代）。</p><p>那么接下来，就继续探究一下<strong>异步加载</strong>的实现。</p><h3 id="关键文件"><a href="#关键文件" class="headerlink" title="关键文件"></a>关键文件</h3><ul><li><code>src/foo.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><ul><li><code>src/index.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/* webpackChunkName: "foo"*/</span><span class="token punctuation">:</span> 魔法字符串，设置打包后的chunk名<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "foo" */</span> <span class="token string">"./foo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>webpack.config.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>  output<span class="token punctuation">:</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出目录</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出文件名称</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// ...</span></code></pre><h3 id="bundle-分析"><a href="#bundle-分析" class="headerlink" title="bundle 分析"></a>bundle 分析</h3><p>打包后输出两个文件：</p><blockquote><p><code>foo.bundle.js</code> 因为是异步加载的方式，单独打包为一个文件。由于打包后的源码内容过长，这里省略部分已经分析过的代码块。</p></blockquote><ul><li><code>index.bundle.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 该对象用于存储已经加载和正在加载中的chunks   * undefined：表示chunk未加载   * null：表示chunk预加载 / 预获取   * Promise：表示chunk正在加载中   * 0: 表示chunk已经加载了   */</span>  <span class="token keyword">var</span> installedChunks <span class="token operator">=</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 默认入口模块已经加载完毕</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置加载chunk的脚本路径 此处的 __webpack_require__.p 为 publicPath，默认为""</span>  <span class="token keyword">function</span> <span class="token function">jsonpScriptSrc</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">+</span>      <span class="token string">""</span> <span class="token operator">+</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">||</span> chunkId<span class="token punctuation">)</span> <span class="token operator">+</span>      <span class="token string">".bundle.js"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 作用：懒加载代码块，原理使用 JSONP</span>  __webpack_require__<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">requireEnsure</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 异步加载时触发的错误函数</span>  __webpack_require__<span class="token punctuation">.</span>oe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存储的是传入的chunk</span>  <span class="token keyword">var</span> jsonpArray <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 存储旧的 jsonpArray.push 方法</span>  <span class="token keyword">var</span> oldJsonpFunction <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用 webpackJsonpCallback 覆盖 jsonpArray.push 方法</span>  jsonpArray<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token punctuation">;</span>  jsonpArray <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> jsonpArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> parentJsonpFunction <span class="token operator">=</span> oldJsonpFunction<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// __webpack_require__.s 用于缓存入口模块id</span>  <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步加载 foo</span>    __webpack_require__      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"./src/foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>foo.bundle.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// [[这里存chunk的名称], {这个对象是存放chunk路径及chunk内容定义的键值对}]</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>      module<span class="token punctuation">,</span>      __webpack_exports__<span class="token punctuation">,</span>      __webpack_require__    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token string">"use strict"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将模块标识为 ES Module</span>      __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 将函数内容定义挂在 default 上</span>      __webpack_exports__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看出，对于同步加载的部分（<code>index.js</code>），依然是使用 <code>__webpack_require__</code> 来进行加载的，这里不做赘述。</p><p>观察 <code>index.js</code> 中对于 <code>foo.js</code> 的加载可以发现，使用到了 <code>__webpack_require__.e</code> 方法，该方法接收 chunkName，返回一个 <code>promise</code>，再传入 chunk 的路径，通过 <code>__webpack_require__</code> 加载 chunk 的内容，最后输出。</p><p>那么关键点就是 <code>__webpack_require__.e</code> 这个方法了。</p><pre class=" language-javascript"><code class="language-javascript">__webpack_require__<span class="token punctuation">.</span>e <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">requireEnsure</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取加载的chunk内容</span>  <span class="token keyword">var</span> installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 0 表示已经加载过了</span>    <span class="token comment" spellcheck="true">// Promise 意味着 chunk 正在加载</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在chunk缓存中设置 Promise</span>      <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此时 installedChunkData = [resolve, reject, promise]</span>      promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> promise<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 开始加载chunk，jsonp方式</span>      <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> onScriptComplete<span class="token punctuation">;</span>      script<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置字符集</span>      script<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 和CSP相关</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"nonce"</span><span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 设置脚本的加载路径</span>      script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token function">jsonpScriptSrc</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 脚本加载完成、超时、出错的事件处理函数</span>      <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      onScriptComplete <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 避免IE内存泄漏</span>        script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> chunk <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> errorType <span class="token operator">=</span>              event <span class="token operator">&&</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"load"</span> <span class="token operator">?</span> <span class="token string">"missing"</span> <span class="token punctuation">:</span> event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> realSrc <span class="token operator">=</span> event <span class="token operator">&&</span> event<span class="token punctuation">.</span>target <span class="token operator">&&</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">;</span>            error<span class="token punctuation">.</span>message <span class="token operator">=</span>              <span class="token string">"Loading chunk "</span> <span class="token operator">+</span>              chunkId <span class="token operator">+</span>              <span class="token string">" failed.\n("</span> <span class="token operator">+</span>              errorType <span class="token operator">+</span>              <span class="token string">": "</span> <span class="token operator">+</span>              realSrc <span class="token operator">+</span>              <span class="token string">")"</span><span class="token punctuation">;</span>            error<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ChunkLoadError"</span><span class="token punctuation">;</span>            error<span class="token punctuation">.</span>type <span class="token operator">=</span> errorType<span class="token punctuation">;</span>            error<span class="token punctuation">.</span>request <span class="token operator">=</span> realSrc<span class="token punctuation">;</span>            chunk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onScriptComplete</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"timeout"</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> script <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> script<span class="token punctuation">.</span>onload <span class="token operator">=</span> onScriptComplete<span class="token punctuation">;</span>      document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>分析这个方法，它的核心作用就是异步加载的实现。</p><ul><li><p>获取传入的 chunkName 在 <code>installedChunks</code> 对象中对应的加载状态，如果状态为非加载完成，则构造一个 <code>promise</code>，将它的 <code>resolve</code>、<code>reject</code> 作为该 chunk 的正在加载状态，并存入到 <code>promises</code> 中。</p></li><li><p>创建 <code>script</code> 标签，将 chunk 的路径作为脚本的加载路径，然后插入到页面的 <code><head></code> 中，让浏览器去下载这个 chunk。</p></li><li><p>最后返回 <code>promises</code> 的执行结果，让所有的 <code>promise</code> 都变为完成态，即完成所有 chunk 的加载。</p></li></ul><p>接着再来看 <code>foo.bundle.js</code>，整个代码体的目的是在向 <code>window.webpackJsonp</code> 中 <code>push</code> 一个数组，这个数组的结构为 <code>[["chunk的名字"], { "chunk的路径": function(){ chunk的内容定义 }}]</code> 。</p><p>回到 <code>index.bundle.js</code> 中我们可以找到关于 <code>window.webpackJsonp</code> 的相关定义及使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> jsonpArray <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">[</span><span class="token string">"webpackJsonp"</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存储旧的 jsonpArray.push 方法</span><span class="token keyword">var</span> oldJsonpFunction <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用 webpackJsonpCallback 覆盖 jsonpArray.push 方法</span>jsonpArray<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token punctuation">;</span>jsonpArray <span class="token operator">=</span> jsonpArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 依次调用 webpackJsonpCallback</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> jsonpArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>jsonpArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 缓存上一次的jsonpArray.push方法，形成链条，将模块共享挂载，起到缓存的作用。</span><span class="token keyword">var</span> parentJsonpFunction <span class="token operator">=</span> oldJsonpFunction<span class="token punctuation">;</span></code></pre><p>这里用 <code>webpackJsonpCallback</code> 覆盖了 <code>window.webpackJson</code> 的 <code>push</code> 方法，也就是说，在 <code>foo.bundle.js</code> 中其实是调用了 <code>webpackJsonpCallback</code> 方法。</p><p>那么，这个 <code>webpackJsonpCallback</code> 方法究竟又做了什么呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> chunkIds <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应加载的chunk的名称的数组</span>  <span class="token keyword">var</span> moreModules <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应加载的chunk的路径和chunk定义组成的对象</span>  <span class="token keyword">var</span> moduleId<span class="token punctuation">,</span>    chunkId<span class="token punctuation">,</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    resolves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator"><</span> chunkIds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    chunkId <span class="token operator">=</span> chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">&&</span>      installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      resolves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 收集所有的resolve</span>    <span class="token punctuation">}</span>    installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标识chunk加载完毕</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 让modules中包含同步和异步加载的所有模块</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>moreModules<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将异步加载的chunk添加到 modules 对象中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parentJsonpFunction<span class="token punctuation">)</span> <span class="token function">parentJsonpFunction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>resolves<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    resolves<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 依次执行resolve，将所有的promise变为完成态</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据代码内容分析，该方法</p><ul><li>首先，判断异步加载的 chunk 是否已经完成加载，如果还在加载中就收集所有 <code>promise</code> 的 <code>resolve</code>方法，接着在 <code>installedChunks</code> 对象中标记 chunk 为加载完成状态</li><li>然后，再把这些 chunk 都添加到 <code>modules</code> 对象中，这样就可通过 <code>modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)</code> 来同步加载 chunk，也就是 <code>foo.bundle.js</code> 中第一个 <code>then</code> 执行的内容，传入模块的路径，使用 <code>__webpack_require__</code> 进行同步加载。</li><li>最后，依次执行收集的 <code>promise</code> 的 <code>resolve</code> 回调，将所有的 <code>promise</code> 变为完成态。</li></ul><p>到此，异步加载原理我们就有了一个基本的了解了。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>源码中还有部分的方法因为没有用到，所以没有做具体的分析。其中 <code>__webpack_require__.t</code> 这个方法很有必要提一下。</p><p>这个方法会在异步加载中用到，比如，<code>foo.js</code> 是 CommonJS 规范的内容。</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><p>这个时候打包出来的入口文件中就可以看到 <code>__webpack_require__.t</code> 的身影。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"./src/foo.js"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该方法传入模块的路径，以及一个数字 <code>7</code>，作用当然也是为了加载模块内容。但它和 <code>__webpack_require__</code> 相比究竟有什么区别呢？</p><pre class=" language-javascript"><code class="language-javascript">__webpack_require__<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">1</span><span class="token punctuation">)</span> value <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">4</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&&</span> value <span class="token operator">&&</span> value<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个命名空间对象</span>  <span class="token keyword">var</span> ns <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将ns对象标识为 ES 模块</span>  __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 给ns对象定义default属性，值为传入的value</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">2</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">!=</span> <span class="token string">"string"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span>      __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>        ns<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ns<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>分析源码可以发现，该方法最终返回一个命名空间对象，接收的第二个参数是个数字，它接下来与 1，2，4，8 进行了按位与操作。想必你已经很快联想到了二进制吧，没错，这几个数字正是对应 0b0001、0b0010、0b0100、0b1000 这几个二进制数。为什么要用数字呢？当然是为了提高运算比较的效率。</p><p>回到正题，该方法通过传入的第二个参数进行了以下处理。</p><ul><li><p>当 <code>mode & 1</code> 为<code>true</code>，表示传入的<code>value</code>是一个模块 id，需要使用 <code>__webpack_require__</code>来加载模块内容</p></li><li><p>当 <code>mode & 2</code> 为<code>true</code>，首先构造了一个 <code>ns</code> 的命名空间对象，将该对象传入 <code>__webpack_require__.r</code> 方法中，被标识为一个 ES Module （即拥有<code>__esModule</code>属性）。接着定义 <code>ns</code> 对象的 <code>default</code> 属性，并将传入的 <code>value</code> 挂上去作为该对象的值。然后遍历传入的 <code>value</code>，将它的属性和值都拷贝定义到 <code>ns</code> 上</p></li><li><p>当 <code>mode & 4</code> 为<code>true</code>，并且传入的 <code>value</code> 是个对象且拥有<code>__esModule</code>属性（表示已经是或者已经被包装为 ES Module 了），则直接返回这个 <code>value</code> 对象</p></li><li><p>当 <code>mode & 8</code> 为<code>true</code>，其行为等同于 <code>require</code>，直接返回 <code>value</code> 即可</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>简单总结一下，为了减少打包的体积，去掉非必要资源加载的浪费，我们需要异步加载方案来优化资源的加载。简单说，就是在需要用到某个文件的时候，通过 <code>import()</code> 引入这个文件，在返回的 <code>promise</code> 的 <code>then</code> 中去获取文件内容，以达到动态加载的目的。当然，这并不是唯一的方法，<code>webpack</code> 还提供了代码分割方案，也可以达到加载优化的效果。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;上一篇&lt;a href=&quot;/article/webpack-bundle-analyse-0/&quot;&gt;webpack 打包文件分析（上）&lt;/a&gt;我们讲到 &lt;code&gt;webpack&lt;/code&gt; 打包源码中文件加载的部分，通过分析了解了在 &lt;code&gt;webpack&lt;/code&gt; 中不同模块规范相互加载的处理。而至此，只包括了文件的&lt;strong&gt;同步加载&lt;/strong&gt;分析，对于文件的异步加载又是如何处理的呢？&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;webpack&lt;/code&gt; 将项目打包为一个 &lt;code&gt;bundle.js&lt;/code&gt; 文件，通过 &lt;code&gt;script&lt;/code&gt; 标签插入到页面中引用。但如果这个 &lt;code&gt;bundle.js&lt;/code&gt; 体积特别大，就会导致我们加载时间过长，阻塞页面的渲染。&lt;/p&gt;
&lt;p&gt;其次，这个打包出来的 &lt;code&gt;bundle.js&lt;/code&gt; 中其实部分的代码资源是当前加载页面用不到的，这样也导致了浪费。于是，资源加载的优化就成了必须要考虑的问题，而异步加载（或者说动态加载）就是解决这个问题的方案之一。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="webpack" scheme="https://fcc-cd.dev/tags/webpack/"/>
    
      <category term="bundle" scheme="https://fcc-cd.dev/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题@组合总和</title>
    <link href="https://fcc-cd.dev/article/algorithm/combined-sum/"/>
    <id>https://fcc-cd.dev/article/algorithm/combined-sum/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~</p><p>这次让我们回到算法本身，来探讨一下回溯算法：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=243225187&bvid=BV1se411W7T4&cid=193228326&page=1"></iframe><h2 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a>组合总和</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定一个<strong>无重复元素</strong>的数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的数字可以无限制重复被选取。</p><a id="more"></a><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>所有数字（包括 <code>target</code>）都是正整数。</p><p>解集不能包含重复的组合。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入: candidates = [2,3,6,7], target = 7,所求解集为:[  [7],  [2,2,3]]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入: candidates = [2,3,5], target = 8,所求解集为:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于这道题来说，最困难的点就在于「<code>candidates</code> 中的数字可以无限制重复被选取」, 这个条件导致了最后结果的集合里面可以选的元素的<strong>数量不一定</strong>，直接导致了满足条件的<strong>可能性组合</strong>的数量暴增，给程序的复杂性带来了一定的挑战。</p><p>面对这种情况，我们就不得不尝试组合出各种能容纳<strong>最多元素</strong>的组合。在学习算法的过程中，可以理解到，类似面临这种 <strong>「查找最远路径」</strong>的问题，最适合的算法场景就是 <strong>「深度优先」</strong>搜索算法。</p><p>回到这个题目当中，我们想要找出所有满足条件的组合，就是要 <strong>「从长到短」、「从小到大」</strong>尝试所有相加不超过 <code>target</code> 的组合。而在如果遇到组合超过 <code>target</code> 的情况，则回到更 <strong>「短」</strong>一点的组合尝试其他可能性：</p><p>以这道题目的 <strong>示例 2</strong> 为例：</p><p><img src="https://pic2.zhimg.com/80/v2-1212bd81293af4adc17fa76ff0c6af61_1440w.jpg" alt></p><p>如图所示，我们从左往右，每次尝试去取到<strong>最多</strong>元素的可能性，当组合的和大于或等于 <code>target</code> 的时候（等于的时候要记录结果），就返回上一层，尝试新的组合（新的组合的数要比之前的大）。相当于在这里 <strong>「剪掉」</strong>了后面的可能性，并 <strong>「返回」</strong>了上一层去尝试。因此这种算法也被称为了 <strong>「回溯剪枝算法」</strong>。提一下，<strong>「回溯剪枝算法」</strong>其实就是一种 <strong>「深度优先查找」(DFS)</strong> 算法。</p><p><strong>注意</strong>：对于这个题来说，这个算法必须在<strong>有序数组</strong>中才可以才行，因为数值越大，深度就越有限。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>了解了思路，我们先来看看 Helen 的解法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} candidates * @param {number} target * @return {number[][]} */</span><span class="token keyword">function</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> tmpPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  candidates <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>tmpPath<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmpPath<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> start<span class="token punctuation">;</span> index <span class="token operator"><</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      tmpPath<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span>tmpPath<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>      tmpPath<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回溯</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">backtrack</span><span class="token punctuation">(</span>tmpPath<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这里，Helen 定义了一个 <code>backtrack</code> 的回溯函数，在其中遍历了 <code>candidates</code> 数组，并在其中递归地又去回溯，从而找出所有的可能性。</p><p>注意其中 <code>target < 0</code> 这个条件，其实就是一个“剪枝”，把超出的可能性剪掉。只不过用了减法的形式，有点反直觉，可以多琢磨下。</p><p>而书香稍微改了下结构，把代码缩短了点：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sliceArr <span class="token operator">=</span> candidates      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator"><=</span> target<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span>    finalArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">findCompose</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> offset<span class="token punctuation">;</span> i <span class="token operator"><</span> sliceArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> subTarget <span class="token operator">=</span> target <span class="token operator">-</span> sliceArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>subTarget <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> finalArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>last<span class="token punctuation">,</span> sliceArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>subTarget <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">findCompose</span><span class="token punctuation">(</span>subTarget<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>last<span class="token punctuation">,</span> sliceArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">findCompose</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> finalArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实差不太多，不过是因为用了 ES 6 数组的解构赋值方法，没有把每个分支都 <code>push</code> 进去，所以回溯的时候就可以少写一个 <code>pop</code> 啦~</p><h2 id="曾大师-Go-语言时间"><a href="#曾大师-Go-语言时间" class="headerlink" title="曾大师 Go 语言时间"></a>曾大师 Go 语言时间</h2><p>他在注释里顺便给我们解释了 <strong>「示例 1」</strong>，并且直接将函数命名成了 <code>DFS</code>（深度优先搜索）。果然很有算法大师的风范呀！</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 深度搜索加减枝,具体过程如下</span><span class="token comment" spellcheck="true">// 2 -> 22 -> 222 -> 2222 -> 223(合适) -> 23 -> 233 -> 26 -> 3 -> 33 -> 333 -> 36 -> 6 -> 66 ->7(合适)</span><span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> currCandidate <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>    result<span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    currCandidate<span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>candidates<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DFS</span><span class="token punctuation">(</span>target <span class="token builtin">int</span><span class="token punctuation">,</span>candidates <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">getSum</span><span class="token punctuation">(</span>currCandidate<span class="token punctuation">)</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>        temCandidate <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>currCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">copy</span><span class="token punctuation">(</span>temCandidate<span class="token punctuation">,</span> currCandidate<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> temCandidate<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">getSum</span><span class="token punctuation">(</span>currCandidate<span class="token punctuation">)</span> <span class="token operator">></span> target <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//主要看这里用0代表相同，-1代表已经超过了当前target，1则表示还能继续加</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>            currCandidate <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>currCandidate<span class="token punctuation">,</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp <span class="token operator">:=</span> <span class="token function">DFS</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            currCandidate <span class="token operator">=</span> currCandidate<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>currCandidate<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> temp <span class="token operator"><=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">getSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>OK，这样看下来，其实算法离我们也没有那么远。事实上如此，算法本身也是为了解决<strong>具体的问题</strong>而诞生的。而我们在练习的过程中，要理解到算法具体解决了什么问题，就可以在遇到类似的问题的时候迎刃而解啦~</p><p>下周见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~&lt;/p&gt;
&lt;p&gt;这次让我们回到算法本身，来探讨一下回溯算法：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=243225187&amp;bvid=BV1se411W7T4&amp;cid=193228326&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;组合总和&quot;&gt;&lt;a href=&quot;#组合总和&quot; class=&quot;headerlink&quot; title=&quot;组合总和&quot;&gt;&lt;/a&gt;组合总和&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣 ​leetcode-cn.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;无重复元素&lt;/strong&gt;的数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中所有可以使数字和为 &lt;code&gt;target&lt;/code&gt; 的组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的数字可以无限制重复被选取。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack 打包文件分析（上）</title>
    <link href="https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-0/"/>
    <id>https://fcc-cd.dev/article/engineering/webpack-bundle-analyse-0/</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-05-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>webpack 是一个用于静态资源打包的工具。它分析你的项目结构，会递归的构建依赖关系，找到其中脚本、图片、样式等将其转换和打包输出为浏览器能识别的资源。</p><p>本篇文章仅对 webpack 打包输出的文件进行简要的分析。</p><a id="more"></a><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p><a href="https://github.com/zhangyanling77/learn-webpack" target="_blank" rel="noopener">项目地址</a></p><p>看一下几个关键文件：</p><ul><li>依赖文件 <code>src/foo.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><ul><li>入口文件 <code>src/index.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>webpack 配置文件 <code>webpack.config.js</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标识不同的环境，development 开发 | production 生产</span>  devtool<span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不生成 source map 文件</span>  entry<span class="token punctuation">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 文件入口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 输出目录</span>    filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span> <span class="token comment" spellcheck="true">// 输出文件名称</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="bundle-分析"><a href="#bundle-分析" class="headerlink" title="bundle 分析"></a>bundle 分析</h2><p>首先放上打包输出文件 <code>dist/bundle.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模块缓存对象</span>  <span class="token keyword">var</span> installedModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建一个新的模块对象</span>    <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      i<span class="token punctuation">:</span> moduleId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 模块id，即模块所在的路径</span>      l<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 该模块是否已经加载过了</span>      exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 导出对象</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>      module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>      module<span class="token punctuation">,</span>      module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>      __webpack_require__    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 标识模块已经加载过了</span>    module<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 该属性用于公开modules对象 (__webpack_modules__)</span>  __webpack_require__<span class="token punctuation">.</span>m <span class="token operator">=</span> modules<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该属性用于公开模块缓存对象</span>  __webpack_require__<span class="token punctuation">.</span>c <span class="token operator">=</span> installedModules<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该属性用于定义兼容各种模块规范输出的getter函数，d即Object.defineProperty</span>  __webpack_require__<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">get</span><span class="token punctuation">:</span> getter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该属性用于在导出对象exports上定义 __esModule = true，表示该模块是一个 ES 6 模块</span>  __webpack_require__<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义这种模块的Symbol.toStringTag为 [object Module]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&&</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"Module"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个命名空间对象</span>  <span class="token comment" spellcheck="true">// mode & 1: 传入的value为模块id，使用__webpack_require__加载该模块</span>  <span class="token comment" spellcheck="true">// mode & 2: 将传入的value的所有的属性都合并到ns对象上</span>  <span class="token comment" spellcheck="true">// mode & 4: 当ns对象已经存在时，直接返回value。表示该模块已经被包装过了</span>  <span class="token comment" spellcheck="true">// mode & 8|1: 行为类似于require</span>  __webpack_require__<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">1</span><span class="token punctuation">)</span> value <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">4</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&&</span> value <span class="token operator">&&</span> value<span class="token punctuation">.</span>__esModule<span class="token punctuation">)</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个命名空间对象</span>    <span class="token keyword">var</span> ns <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将ns对象标识为es模块</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给ns对象定义default属性，值为传入的value</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&</span> <span class="token number">2</span> <span class="token operator">&&</span> <span class="token keyword">typeof</span> value <span class="token operator">!=</span> <span class="token string">"string"</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span>        __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>          ns<span class="token punctuation">,</span>          key<span class="token punctuation">,</span>          <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ns<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取模块的默认导出对象，这里区分 CommonJS 和 ES module 两种方式</span>  __webpack_require__<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> getter <span class="token operator">=</span>      module <span class="token operator">&&</span> module<span class="token punctuation">.</span>__esModule        <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> module<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">getModuleExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> module<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> getter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> getter<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该属性用于判断对象自身属性中是否具有指定的属性，o即Object.prototype.hasOwnProperty</span>  __webpack_require__<span class="token punctuation">.</span>o <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 该属性用于存放公共访问路径，默认为'' (__webpack_public_path__)</span>  __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 加载入口模块并返回模块的导出对象</span>  <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">"./src/foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据上面的源码可以看出，最终打包出的是一个自执行函数。</p><p>首先，这个自执行函数它接收一个参数 <code>modules</code>，<code>modules</code>为一个对象，其中 <code>key</code> 为打包的模块文件的路径，对应的 <code>value</code> 为一个函数，其内部为模块文件定义的内容。</p><p>然后，我们再来看一看自执行函数的函数体部分。函数体返回 <code>__webpack_require__(__webpack_require__.s = "./src/index.js")</code> 这段代码，此处为加载入口模块并返回模块的导出对象。</p><p>可以发现，webpack 自己实现了一套加载机制，即 <code>__webpack_require__</code>，可以在浏览器中使用。该方法接收一个 <code>moduleId</code>，返回当前模块的导出对象。</p><h3 id="webpack-文件加载-webpack-require"><a href="#webpack-文件加载-webpack-require" class="headerlink" title="webpack 文件加载 (__webpack_require__)"></a>webpack 文件加载 (__webpack_require__)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> installedModules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    i<span class="token punctuation">:</span> moduleId<span class="token punctuation">,</span>    l<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>    module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>    module<span class="token punctuation">,</span>    module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>    __webpack_require__  <span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>首先，当前作用域顶端声明了 <code>installedModules</code> 这个对象，它用于缓存加载过的模块。在 <code>__webpack_require__</code> 方法内部，会对于传入的 <code>moduleId</code> 在缓存对象中查找对应的模块是否存在，如果已经存在，返回该模块对象的导出对象；否则，创建一个新的模块对象，记录当前模块 id、标识模块是否加载过、以及定义导出对象，同时将它放到缓存对象中。</p><p>接下来就是重要的一步，执行模块的函数内容，传入 <code>module</code>、<code>module.exports</code> 及 <code>__webpack_require__</code> 作为参数。</p><pre class=" language-javascript"><code class="language-javascript">modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>  module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>  module<span class="token punctuation">,</span>  module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>  __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也就是去执行自执行函数传入的 <code>modules</code> 对象中当前 <code>moduleId</code> 对应的函数。接着将该模块标识为已经加载的状态，最后返回当前模块的导出对象。此时便完成了模块的加载任务。</p><p>接着，再来看看传入的 <code>modules</code> 对象部分。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">"./src/foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>观察函数体内容，可以看到对于依赖模块 <code>foo.js</code> 而言，函数体内即为 <code>foo.js</code> 文件中的定义内容。而对于入口模块 <code>index.js</code>，则需要执行 <code>__webpack_require__</code> 方法将依赖的文件加载进来使用。</p><p>那么，到此为止，我们已经明白了 webpack 加载模块的基本原理。但细心的你一定发现了，我们的文件导入导出遵循的是 CommonJS 规范，而 webpack 是基于 Node.js 实现的，所以在文件加载部分并没有特别的处理。因此，这里我们来看看不同模块规范相互加载时，webpack 是如何处理的。</p><p><strong>harmony（和谐，即对于不同模块规范加载的一个兼容处理）</strong></p><ul><li>CommonJS 加载 CommonJS</li></ul><p>这种方式即我们上面示例的加载方式，就不做赘述了。</p><h4 id="CommonJS-加载-ES-module"><a href="#CommonJS-加载-ES-module" class="headerlink" title="CommonJS 加载 ES module"></a>CommonJS 加载 ES module</h4><p>src/foo.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><p>src/index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>dist/bundle.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>    __webpack_exports__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token string">"./src/foo.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由打包后的源码可以发现，当 <code>foo.js</code> 使用 ES module 方式导出，与之前的相比，多了 <code>__webpack_require__.r(__webpack_exports__)</code>这段代码，<code>__webpack_exports__</code> 很好理解，即模块的导出对象。那么，<code>__webpack_require__.r</code> 方法是干嘛的呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>__webpack_require__<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&&</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"Module"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>根据其实现可知，该方法将传入的对象标识上 <code>__esModule=true</code>，即表明该模块为 ES 6 模块。同时定义该对象的 <code>Symbol.toStringTag</code> 为 <code>Module</code>，即当使用 <code>Object.prototype.toString.call</code> 时将返回 <code>[object Module]</code>。</p><p>最后，将模块的内容挂在 <code>__webpack_exports__</code> 的 <code>default</code> 属性上。</p><h4 id="ES-module-加载-ES-module"><a href="#ES-module-加载-ES-module" class="headerlink" title="ES module 加载 ES module"></a>ES module 加载 ES module</h4><p>src/foo.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><p>src/index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">"./foo.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>dist/bundle.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>    __webpack_exports__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    module<span class="token punctuation">,</span>    __webpack_exports__<span class="token punctuation">,</span>    __webpack_require__  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _foo_js__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>      <span class="token string">"./src/foo.js"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_foo_js__WEBPACK_IMPORTED_MODULE_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当入口文件 <code>index.js</code> 和依赖文件 <code>foo.js</code> 都遵循 ES module 的方式时，可以发现在 <code>index.js</code> 中，对于获取导出对象的方式也有所不同。<code>_foo_js__WEBPACK_IMPORTED_MODULE_0__</code> 用来接收导入的文件，并通过 <code>default</code> 属性获取到文件的默认导出内容。</p><p>那么，是如何实现这种方式的呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ...</span>__webpack_require__<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">get</span><span class="token punctuation">:</span> getter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span>__webpack_require__<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> getter <span class="token operator">=</span>    module <span class="token operator">&&</span> module<span class="token punctuation">.</span>__esModule      <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> module<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">getModuleExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> module<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>  __webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> getter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> getter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>__webpack_require__<span class="token punctuation">.</span>o <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>分析这几个方法可以发现，<code>__webpack_require__.o</code> 其实就是 <code>Object.prototype.hasOwnProperty</code> 的一个重写，用于判断对象自身属性中是否具有指定的属性。而 <code>__webpack_require__.d</code> 即 <code>Object.defineProperty</code>，这里用于定义兼容各种模块规范输出的 getter 函数。<code>__webpack_require__.n</code> 则是用于获取模块的默认导出对象，兼容 CommonJS 和 ES module 两种方式。</p><h4 id="ES-module-加载-CommonJS"><a href="#ES-module-加载-CommonJS" class="headerlink" title="ES module 加载 CommonJS"></a>ES module 加载 CommonJS</h4><p>src/foo.js</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span></code></pre><p>src/index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">"./foo.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>dist/bundle.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"./src/foo.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    module<span class="token punctuation">,</span>    __webpack_exports__<span class="token punctuation">,</span>    __webpack_require__  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    __webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _foo_js__WEBPACK_IMPORTED_MODULE_0__ <span class="token operator">=</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>      <span class="token string">"./src/foo.js"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> _foo_js__WEBPACK_IMPORTED_MODULE_0___default <span class="token operator">=</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">n</span><span class="token punctuation">(</span>      _foo_js__WEBPACK_IMPORTED_MODULE_0__    <span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_foo_js__WEBPACK_IMPORTED_MODULE_0___default<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当入口文件 <code>index.js</code> 以 ES module 的方式加载遵循 CommonJS 规范的 <code>foo.js</code> 时，通过 <code>__webpack_require__</code> 加载传入的模块，将得到的模块 <code>_foo_js__WEBPACK_IMPORTED_MODULE_0__</code> 再传入 <code>__webpack_require__.n</code> 方法获取到该模块的默认导出对象。因为 <code>foo.js</code> 中的内容是通过 <code>export</code> 导出，而非 <code>export default</code> 导出。因此 <code>foo</code> 被挂在了 <code>default</code> 的一个 <code>a</code> 属性上。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>webpack 对于不同模块规范的相互加载的处理，我们已经有了基本的了解。但此时我们的文件加载都是同步的，那么文件的异步加载又是怎么样的呢？</p><p>请听下回分解。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;webpack 是一个用于静态资源打包的工具。它分析你的项目结构，会递归的构建依赖关系，找到其中脚本、图片、样式等将其转换和打包输出为浏览器能识别的资源。&lt;/p&gt;
&lt;p&gt;本篇文章仅对 webpack 打包输出的文件进行简要的分析。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Engineering" scheme="https://fcc-cd.dev/categories/Article/Engineering/"/>
    
    
      <category term="webpack" scheme="https://fcc-cd.dev/tags/webpack/"/>
    
      <category term="bundle" scheme="https://fcc-cd.dev/tags/bundle/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】匹配子序列的单词数</title>
    <link href="https://fcc-cd.dev/article/algorithm/number-of-words-matching-subsequence/"/>
    <id>https://fcc-cd.dev/article/algorithm/number-of-words-matching-subsequence/</id>
    <published>2020-05-10T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~</p><p>这次让我们换换口味，讨论一个稍微偏实际一点的问题：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=925667742&bvid=BV1bT4y1u7Vy&cid=189923369&page=1"></iframe><a id="more"></a><h2 id="匹配子序列的单词数"><a href="#匹配子序列的单词数" class="headerlink" title="匹配子序列的单词数"></a>匹配子序列的单词数</h2><p><a href="https://leetcode-cn.com/problems/number-of-matching-subsequences/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定字符串 S 和单词字典 words, 求 words[i] 中是 S 的子序列的单词个数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-text"><code class="language-text">输入:S = "abcde"words = ["a", "bb", "acd", "ace"]输出: 3解释: 有三个是 S 的子序列的单词: "a", "acd", "ace"。</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>所有在 words 和 S 里的单词都只由小写字母组成。</p><p>S 的长度在 [1, 50000]。</p><p>words 的长度在 [1, 5000]。</p><p>words[i] 的长度在 [1, 50]。</p><h2 id="暴力破解法"><a href="#暴力破解法" class="headerlink" title="暴力破解法"></a>暴力破解法</h2><p>这周的题目相对简单。从题意上来理解，无非就是 <code>words</code> 数组中每一个单词拿到 <code>S</code> 字符串中去尝试匹配就好。稍微值得注意的是，因为匹配的规则在于<strong>不一定是连续子字符串匹配</strong>，因此需要考虑<strong>每个字母</strong>在其中是否<strong>全部都</strong>存在，Helen 给出了暴力解法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">numMatchingSubseq</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>      _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str <span class="token keyword">of</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> _index <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> index <span class="token operator">=</span> _index<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_count <span class="token operator">===</span> word<span class="token punctuation">.</span>length<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>书香在同样的思路上，利用 JS 的自带 API ，稍微做了一些<strong>写法上的优化</strong>，让程序看起来更简短了一些：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">numMatchingSubseq</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isSubWord <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      pos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> words<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> count <span class="token operator">+</span> <span class="token function">isSubWord</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你看出了其中的相同之处了吗？</p><h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><p>既然是字串匹配，自然可以通过正则表达式来完成匹配。书香尝试了这一解法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">numMatchingSubseq</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> words<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> word<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> testReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"w*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是，<strong>正则匹配</strong>花费的计算资源会<strong>更高</strong>一些，因此这个解法在题目中的<strong>超长字串</strong>测试用例中，因为超出时间限制而失败了…… 在这里贴出这段代码，仅作为一种思路的参考。</p><h2 id="可不可以不那么暴力？"><a href="#可不可以不那么暴力？" class="headerlink" title="可不可以不那么暴力？"></a>可不可以不那么暴力？</h2><p>Helen 作为三人行里唯一的女生，自然忍不了动不动就 <strong>「暴力破解」</strong>的做法 ‍♀️。因此她换了一个不那么暴力的思路，通过将 <code>words</code> 中的单词按照<strong>首字母</strong>先排序到一个 <strong>「桶」</strong>中，将数据进行了<strong>预处理</strong>，然后在字符串匹配其中字符的的时候，就可以从对应的地方匹配了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">numMatchingSubseq</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> bucket <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> bucket<span class="token punctuation">[</span>word<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 的 Unicode 是 97</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str <span class="token keyword">of</span> S<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> bucket<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bucket<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> list<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        word <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> bucket<span class="token punctuation">[</span>word<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>曾大师的 Go 语言时光，他似乎也很暴力……</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">numMatchingSubseq</span><span class="token punctuation">(</span>S <span class="token builtin">string</span><span class="token punctuation">,</span> words <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    count <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        stat <span class="token operator">:=</span> <span class="token number">0</span>        word <span class="token operator">:=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> word<span class="token punctuation">[</span>stat<span class="token punctuation">]</span> <span class="token operator">==</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>                    stat<span class="token operator">++</span>                    <span class="token keyword">if</span> stat <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        count<span class="token operator">++</span>                        <span class="token keyword">break</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">}</span></code></pre><p><img src="https://pic3.zhimg.com/80/v2-324d4980593113295435a6ab95218f1e_1440w.jpg" alt></p><p>这一次他的时间消耗就没有那么好了，你能看出相比其前面 JS 的两个暴力解法，这次他为什么「失手」了吗？</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>在这次题目中，三人行不约而同采用了「暴力解法」，并且在<strong>一定程度</strong>的简单优化上，时间和空间的利用成绩都还不错。事实在，在写代码的过程中，往往也是一个迭代的过程，前期<strong>过度地优化</strong>有时候反而不如先利用最直观的方式把程序先跑起来，再根据<strong>需求和场景条件</strong>来进行对应的优化更好。</p><p>下周见啦~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~&lt;/p&gt;
&lt;p&gt;这次让我们换换口味，讨论一个稍微偏实际一点的问题：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=925667742&amp;bvid=BV1bT4y1u7Vy&amp;cid=189923369&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>【青铜三人行】二叉树中的最大路径和</title>
    <link href="https://fcc-cd.dev/article/algorithm/max-path-sum-of-binary-tree/"/>
    <id>https://fcc-cd.dev/article/algorithm/max-path-sum-of-binary-tree/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌~ 这一次，青铜三人行决定在五一假期期间挑战一道难度为「困难」的题目：</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=285596520&bvid=BV1yf4y1m7Le&cid=187460008&page=1"></iframe><a id="more"></a><h2 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a>二叉树中的最大路径和</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">力扣 ​leetcode-cn.com</a></p><p>给定一个<strong>非空</strong>二叉树，返回其最大路径和。</p><p>本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径<strong>至少包含一个</strong>节点，且不一定经过根节点。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre class=" language-text"><code class="language-text">输入：[1, 2, 3]       1      / \     2   3输出：6</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre class=" language-text"><code class="language-text">输入：[-10, 9, 20, null, null, 15, 7]   -10   / \  9  20    /  \   15   7输出: 42</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为这次题目相对来说比较困难，因此就以一种思路来说明。</p><p>这道题的难点在于，题目中要求取的“任意节点出发”的路径，且不一定经过根节点。导致在如何迭代求取上，陷入了一个比较复杂的境地。</p><p>为了求解这个问题，我们需要将题目先简化一下，分步骤完成：</p><h3 id="求取某一节点为起始的最大路径和"><a href="#求取某一节点为起始的最大路径和" class="headerlink" title="求取某一节点为起始的最大路径和"></a>求取某一节点为起始的最大路径和</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> leftPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>    rightPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> maxPathValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftPathVal<span class="token punctuation">,</span> rightPathVal<span class="token punctuation">)</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPathValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这一步中，我们递归求取了某一个节点为开始的<strong>单边最大路径和</strong>，值得注意的是，如果取出来的值是负值，则设为 0，意为「舍弃」掉这条路径。</p><h3 id="求取经过某一根节点的最大路径和"><a href="#求取经过某一根节点的最大路径和" class="headerlink" title="求取经过某一根节点的最大路径和"></a>求取经过某一根节点的最大路径和</h3><p>完成了上一步，我们就可以求取经过某一特定根节点的最大路径和了，即把「某个节点的值」与「左边最大路径和」和「右边最大路径和」相加：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRootMaxPathVal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> leftMaxPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>    rightMaxPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> leftMaxPathVal <span class="token operator">+</span> rightMaxPathVal <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="遍历求取整颗二叉树的最大路径值"><a href="#遍历求取整颗二叉树的最大路径值" class="headerlink" title="遍历求取整颗二叉树的最大路径值"></a>遍历求取整颗二叉树的最大路径值</h3><p>有了上面的基础，我们就可以遍历整个二叉树，来求取所有节点的最大路径和，并取出其中的最大值来作为整颗二叉树的最大路径和了，在这里我们用了二叉树前序遍历，并使用了一个全局变量 <code>result</code> 来记录最大值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getRootMaxPathVal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> result<span class="token punctuation">)</span> result <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到此我们就可以解出这道题目了，完整代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {TreeNode} root * @return {number} */</span><span class="token keyword">function</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> leftPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>      rightPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> maxPathValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftPathVal<span class="token punctuation">,</span> rightPathVal<span class="token punctuation">)</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxPathValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getRootMaxPathVal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> leftMaxPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>      rightMaxPathVal <span class="token operator">=</span> <span class="token function">maxChildrenPathValue</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftMaxPathVal <span class="token operator">+</span> rightMaxPathVal <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getRootMaxPathVal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> result<span class="token punctuation">)</span> result <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>同样的解题思路下，Helen 发现到在<strong>求取某一节点为起始的最大路径和</strong>这一步的时候，已经在对二叉树进行遍历了，那能不能直接在一次递归遍历中解出题目呢？Helen 对代码进行了优化：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> max_sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">max_gain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> left_gain <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max_gain</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      right_gain <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max_gain</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newPath <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left_gain <span class="token operator">+</span> right_gain<span class="token punctuation">;</span>    max_sum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> max_sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left_gain<span class="token punctuation">,</span> right_gain<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">max_gain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> max_sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码简洁多了，运行也更快了！你有没有发现两个解法的共同之处和不同之处呢？</p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>最后依然是曾大师的 Go 语言 show time~</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">INT_MIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">subMaxPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">subMaxPathSum</span><span class="token punctuation">(</span>root <span class="token operator">*</span>TreeNode<span class="token punctuation">,</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    left <span class="token operator">:=</span> <span class="token function">subMaxPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    right <span class="token operator">:=</span> <span class="token function">subMaxPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>Right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    threeSub <span class="token operator">:=</span> root<span class="token punctuation">.</span>Val <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    twoSub <span class="token operator">:=</span> root<span class="token punctuation">.</span>Val <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>val <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">*</span>val<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>threeSub<span class="token punctuation">,</span> twoSub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> twoSub<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">INT_MIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> intMax <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">^</span>intMax<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x <span class="token operator"><</span> y        <span class="token keyword">return</span> y    <span class="token keyword">return</span> x<span class="token punctuation">}</span></code></pre><p><img src="https://pic3.zhimg.com/v2-1cb2ef07ced0438a01b6bffe9c0ca4ce_b.jpg" alt></p><p>结果依然很惊人啊…… 嗯……</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这次的题目有些复杂，但通过简化题目、拆解步骤，也可以让困难的题目得到解决。而日常编程的过程中，也是在将复杂问题简单化、步骤化的一个过程。最后留个小问题，之前提到过，所有的递归都可以用循环来解决，那么在第一步的递归中，如果用循环解决该怎么做呢？下周见~</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌~ 这一次，青铜三人行决定在五一假期期间挑战一道难度为「困难」的题目：&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=285596520&amp;bvid=BV1yf4y1m7Le&amp;cid=187460008&amp;page=1&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="二叉树" scheme="https://fcc-cd.dev/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】删除链表的倒数第 N 个节点</title>
    <link href="https://fcc-cd.dev/article/algorithm/remove-nodes-of-linked-lists/"/>
    <id>https://fcc-cd.dev/article/algorithm/remove-nodes-of-linked-lists/</id>
    <published>2020-05-05T11:13:52.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>每周一题，代码无敌。这周，「青铜三人行」为你带来了一道关于“链表的题目”。</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=882851982&bvid=BV1nK4y1k75D&cid=180931816&page=1"></iframe><h2 id="删除链表的倒数第-N-个节点"><a href="#删除链表的倒数第-N-个节点" class="headerlink" title="删除链表的倒数第 N 个节点"></a>删除链表的倒数第 N 个节点</h2><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><blockquote><p>给定一个链表: 1 -> 2 -> 3 -> 4 -> 5, 和 n = 2；<br>当删除了倒数第二个节点后，链表变为 1 -> 2 -> 3 -> 5。</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>给定的 n 保证是有效的。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>你能尝试使用一趟扫描实现吗？</p><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="noopener">力扣 ​ leetcode-cn.com</a></p><a id="more"></a><h2 id="啥是链表"><a href="#啥是链表" class="headerlink" title="啥是链表"></a>啥是链表</h2><p>要完成这道题，首先就得了解一下啥是链表？简单来说，<strong>链表</strong>是一种数据结构，它由一系列离散的<strong>节点</strong>组成。其特点是，每个节点上除了自己的数据以外，还会有一个或两个指针指向下一个或者上一个节点，使得这些节点可以<strong>链</strong>起来。</p><p>其中，只有指向下一个节点的链表称为<strong>单向链表</strong>，它只能从前一个节点到下一个节点一个方向来查找其中的节点数据：</p><p><img src="https://pic4.zhimg.com/80/v2-1cf240bd549d6f37c5cc3526d97fefbb_1440w.png" alt></p><p>而<strong>双向链表</strong>则拥有两个指针，分别指向之前和之后的节点：</p><p><img src="https://pic2.zhimg.com/80/v2-ba4663d586b2181725d053226212c125_1440w.png" alt></p><p>而在 JS 中，这道题目里给我们设定了链表的结构，很明显，是一个单向列表：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="解法一：两次遍历找到对应的节点"><a href="#解法一：两次遍历找到对应的节点" class="headerlink" title="解法一：两次遍历找到对应的节点"></a>解法一：两次遍历找到对应的节点</h2><p>了解了链表的数据结构以后，这道题就不难解决了。不过题目里有个小小的花招，即要求寻找「倒数第 n 个节点」。因为是单向链表，我们没法倒着寻找节点，因此我们很容易想到先找到整个链表的长度，计算出要找的元素的正向位置，然后再从头遍历，进行删除：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> head<span class="token punctuation">,</span>    length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    length<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  node <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> length<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="解法二：转离散节点为连续节点"><a href="#解法二：转离散节点为连续节点" class="headerlink" title="解法二：转离散节点为连续节点"></a>解法二：转离散节点为连续节点</h2><p>这道题数据量较小，因此运行的速度都比较快。于是向着题目中「只扫描一次」这个进阶目标前进。书香提出了一种方法，既然题目的难点在于链表不容易反向查找，那么把它映射成一个连续的数据结构不就可以解决了吗？于是很自然想到了应用<strong>数组</strong>完成了题目：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * @param {ListNode} head * @param {number} n * @return {ListNode} */</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">const</span> arrNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> length <span class="token operator">=</span> arrNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token keyword">else</span> arrNodes<span class="token punctuation">[</span>length <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> arrNodes<span class="token punctuation">[</span>length <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arrNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>值得注意的是，当需要删除的元素是第一个元素的时候，容易造成数组的越界，需要特殊处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> n<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span></code></pre><h2 id="解法三：双指针法"><a href="#解法三：双指针法" class="headerlink" title="解法三：双指针法"></a>解法三：双指针法</h2><p>上面书香的解法虽然在一次扫描中完成了任务，却额外引入了一个数组的外部结构。有没有更好的办法呢？Helen 和 曾大师对于这个问题，采用了新的办法：题目要求删除倒数第 n 个节点，那么我只需要在我当前扫描到的节点指针之后相隔 n 的节点再设置一个指针，到后一个指针越界的时候，当前节点就是需要删除的节点了：</p><p><img src="https://pic4.zhimg.com/80/v2-54faa5b2a27d7d1ece3ea52a2dcaaa1b_1440w.jpg" alt></p><p>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> dummy<span class="token punctuation">,</span>    r <span class="token operator">=</span> dummy<span class="token punctuation">,</span>    offset <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>offset<span class="token operator">--</span><span class="token punctuation">)</span> r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  l<span class="token punctuation">.</span>next <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Ertra"><a href="#Ertra" class="headerlink" title="Ertra"></a>Ertra</h2><p>最后，曾大师 go 语言的福利时间又到啦，同样是双指针，你能看出有什么不同吗？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>    store <span class="token operator">:=</span> head    i <span class="token operator">:=</span> <span class="token number">0</span>    p <span class="token operator">:=</span> head    <span class="token keyword">for</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            store <span class="token operator">=</span> store<span class="token punctuation">.</span>Next        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next        i<span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除头节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> store<span class="token punctuation">.</span>Next    <span class="token punctuation">}</span>    store<span class="token punctuation">.</span>Next <span class="token operator">=</span> store<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next    <span class="token keyword">return</span> head<span class="token punctuation">}</span></code></pre><p>而在时间和空间上，相当惊人，嗯嗯……</p><p><img src="https://pic3.zhimg.com/80/v2-0a19434826b19ed6fa7a451b3671f18e_1440w.jpg" alt></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这周的题目相对来说比较简单，主要是说明了链表的数据结构。链表相对于<strong>数组</strong>来说，更容易<strong>插入、删除</strong>其中的节点，而数组比起来则更容易<strong>查找</strong>到某个节点（想想为什么？）。两个数据结构相辅相成，在不同的应用场景选择合适的数据结构，可以让你的程序运行起来事半功倍哦！</p><p>这次的题目就这样了，欢迎通过 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a> 邮箱联系我们，下周见！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;每周一题，代码无敌。这周，「青铜三人行」为你带来了一道关于“链表的题目”。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=882851982&amp;bvid=BV1nK4y1k75D&amp;cid=180931816&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;删除链表的倒数第-N-个节点&quot;&gt;&lt;a href=&quot;#删除链表的倒数第-N-个节点&quot; class=&quot;headerlink&quot; title=&quot;删除链表的倒数第 N 个节点&quot;&gt;&lt;/a&gt;删除链表的倒数第 N 个节点&lt;/h2&gt;&lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个链表: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, 和 n = 2；&lt;br&gt;当删除了倒数第二个节点后，链表变为 1 -&gt; 2 -&gt; 3 -&gt; 5。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;给定的 n 保证是有效的。&lt;/p&gt;
&lt;h3 id=&quot;进阶&quot;&gt;&lt;a href=&quot;#进阶&quot; class=&quot;headerlink&quot; title=&quot;进阶&quot;&gt;&lt;/a&gt;进阶&lt;/h3&gt;&lt;p&gt;你能尝试使用一趟扫描实现吗？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;力扣 ​ leetcode-cn.com&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
      <category term="链表" scheme="https://fcc-cd.dev/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="https://fcc-cd.dev/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【青铜三人行】每周一题@三数之和</title>
    <link href="https://fcc-cd.dev/article/algorithm/three-number-sum-algorithm/"/>
    <id>https://fcc-cd.dev/article/algorithm/three-number-sum-algorithm/</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-10-29T16:00:16.149Z</updated>
    
    <content type="html"><![CDATA[<html><head><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"></head><body><p>哈喽~ 每周一题，代码无敌。欢迎各位继续观看「<a href="https://zhuanlan.zhihu.com/brozen3" target="_blank" rel="noopener">青铜三人行</a>」的刷题现场。</p><iframe frameborder="no" framespacing="0" scrolling="no" allowfullscreen="true" loading="lazy" lazyload="1" src="//player.bilibili.com/player.html?aid=497725505&bvid=BV1AK411j7D9&cid=177264428&page=1"></iframe><p>话不多说，我们进入<a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">这周的题目</a>吧：</p><a id="more"></a><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a、b、c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p><em>注意：答案中不可以包含重复的三元组。</em></p><p><em>例如</em></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 给定数组</span><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="最初的解法"><a href="#最初的解法" class="headerlink" title="最初的解法"></a>最初的解法</h2><p>Helen 拿到题目，心想这道题岂不是如同上周的“<strong>两数之和</strong>”一般？无非就是多加了一个数而已。按照思路，首先暴力举出所有满足条件的三个数，再去重即可，写出了如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator"><</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 转换成字符串方便去重</span>          <span class="token keyword">const</span> strResult <span class="token operator">=</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>拿入测试用例执行，结果正确 😎：</p><p><img src="https://pic4.zhimg.com/80/v2-0be884ded750ba5149622c5ef456ae97_1440w.jpg" alt></p><p>于是提交，结果被现实狠狠打脸……😱：</p><p><img src="https://pic2.zhimg.com/80/v2-7682eca82a75a7957b6568a53bd16acd_1440w.jpg" alt></p><h2 id="排序解法"><a href="#排序解法" class="headerlink" title="排序解法"></a>排序解法</h2><p>纳尼？这道题居然有时间限制…… 太阴险了吧……😵 看样子传统的暴力破解法，在三重循环之下，时间复杂度到达了 O(n³)，时间消耗应该是远远超过了题设。</p><p>看样子想解出这道题，至少要“消灭”掉其中的一重循环。Helen 找来书香一起讨论，两人细细品味题目，发现题目要求：<code>a + b + c == 0</code> ，那说明这三个在数组中的数，除开三个数都为 0 的情况，必然有正有负，有大有小。</p><p>换言之，如果给定一个“最小”的数，我们只需要在比这个数“大”的剩余数组里找出”其他”两个数，看看它们加起来的结果。如果等于 0，则加入结果，如果大于 0，则设法调整“其他两数”，使其和变小。若小于 0，则设法使“其他两数”之和变大。</p><p>而在<strong>有序数组</strong>中，调整两数相加之和的大小是只需要一次循环就可以做到的，如此一来，我们似乎就可以在 O(n²) 的时间复杂度中就可以完成题设了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然而在提交时，遇到了一个诡异的测试用例，导致还是超时了 😰：</p><p><img src="https://pic1.zhimg.com/80/v2-a50849a9affc6db152b80958dbcc9e78_1440w.jpg" alt></p><p>居然还有这么奇葩的测试用例！大量的 0 构成的数组。还好这并没有难倒 Helen, 既然题设里要求没有<strong>重复的三元组</strong>，那么加上了一个<strong>跳过重复元素</strong>的条件就好了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提交，代码终于顺利通过啦 😆：</p><p><img src="https://pic1.zhimg.com/80/v2-ca8c3c3855741796038d90e409890720_1440w.jpg" alt></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>看到解题终于通过，大家欢欣鼓舞，也打开了更多的思路。书香发现，既然要相加等于 0，那么除开<strong>全为 0</strong>的情况，必然结果里<strong>有正有负</strong>。换言之，第一层循环选取的数字，只需要遍历“<strong>非正数</strong>”的部分就好，于是加了个条件尝试了一番：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">=</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而 Helen 则从“<strong>去重</strong>”这一部分上进行了优化，节省了转化成字符串，再用 <code>Set</code> 等数据结构去重带来的额外开销：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> funcSeq <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token keyword">const</span> sortedNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>funcSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> sortedNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> lIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      rIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> lNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span><span class="token punctuation">,</span>        rNum <span class="token operator">=</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>lNum<span class="token punctuation">,</span> num<span class="token punctuation">,</span> rNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lIndex <span class="token operator"><</span> rIndex <span class="token operator">&&</span> sortedNums<span class="token punctuation">[</span>lIndex<span class="token punctuation">]</span> <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>lIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          lIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rIndex <span class="token operator">></span> lIndex <span class="token operator">&&</span> sortedNums<span class="token punctuation">[</span>rIndex<span class="token punctuation">]</span> <span class="token operator">===</span> sortedNums<span class="token punctuation">[</span>rIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          rIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator"><</span> <span class="token number">0</span><span class="token punctuation">)</span> lIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lNum <span class="token operator">+</span> num <span class="token operator">+</span> rNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rIndex <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而优化之后的结果也是相当理想：</p><p><img src="https://pic1.zhimg.com/80/v2-03686f83024d4048bd039f07865fc378_1440w.jpg" alt></p><h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>最后，我们照例贴上曾大师的 Go 语言代码：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> keyCountMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment" spellcheck="true">/*创建集合 */</span>    keyCountMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        count<span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ok <span class="token punctuation">{</span>            keyCountMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             keyCountMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    newNums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>keyCountMap<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> keyi <span class="token operator">:=</span> <span class="token keyword">range</span> keyCountMap <span class="token punctuation">{</span>        newNums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newNums<span class="token punctuation">,</span> keyi<span class="token punctuation">)</span>        <span class="token keyword">if</span> keyCountMap<span class="token punctuation">[</span>keyi<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> keyi <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCountMap<span class="token punctuation">[</span>keyi<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> remain <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> keyi <span class="token operator">*</span> <span class="token number">2</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>remain<span class="token punctuation">]</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> keyi<span class="token punctuation">,</span> keyi<span class="token punctuation">,</span> remain<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> remain <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> remain <span class="token operator">==</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> keyCountMap <span class="token punctuation">[</span>remain<span class="token punctuation">]</span>            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>                <span class="token keyword">var</span> b1 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator"><</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> remain <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            b1 <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token keyword">break</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> b1 <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> newNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newNums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> remain<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这里，他另辟蹊径，采用了类似上周“两数之和”的题目解法，利用空间换时间，将数组转成 map 形式进行查找。同样通过了题目：</p><p><img src="https://pic2.zhimg.com/80/v2-3fc6719119e36050b599033d672eb4e5_1440w.jpg" alt></p><p>在这里，提个小问题：既然在“三数之和”可以参考“两数之和”的转换成 map 解题的方法，那在“两数之和”中，能不能参考上述“先排序，比较大小查找”的方法呢？</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这周的题目难度上升为了“中等”，随着难度的上升，在解题上也无法完全做到完美。如果你有更好的思路，欢迎通过 <a href="mailto:bronze_3@163.com">bronze_3@163.com</a> 邮箱联系我们~</p><p>下周见！</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;哈喽~ 每周一题，代码无敌。欢迎各位继续观看「&lt;a href=&quot;https://zhuanlan.zhihu.com/brozen3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;青铜三人行&lt;/a&gt;」的刷题现场。&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; framespacing=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot; loading=&quot;lazy&quot; lazyload=&quot;1&quot; src=&quot;//player.bilibili.com/player.html?aid=497725505&amp;bvid=BV1AK411j7D9&amp;cid=177264428&amp;page=1&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;话不多说，我们进入&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这周的题目&lt;/a&gt;吧：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="Article" scheme="https://fcc-cd.dev/categories/Article/"/>
    
      <category term="Algorithm" scheme="https://fcc-cd.dev/categories/Article/Algorithm/"/>
    
    
      <category term="LeetCode" scheme="https://fcc-cd.dev/tags/LeetCode/"/>
    
      <category term="Bronze-3" scheme="https://fcc-cd.dev/tags/Bronze-3/"/>
    
  </entry>
  
</feed>
